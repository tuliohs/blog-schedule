{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Users/MGS/Sistemas/temp/courselit/packages/blog/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/MGS/Sistemas/temp/courselit/packages/blog/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\MGS\\\\Sistemas\\\\temp\\\\courselit\\\\packages\\\\blog\\\\components\\\\CheckoutExternal\\\\Free.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"@material-ui/core\";\nimport { addressProps, authProps, publicCourse } from \"../../types\";\nimport { ENROLL_BUTTON_TEXT } from \"../../config/strings\"; //import { connect } from \"react-redux\";\n\nimport fetch from \"isomorphic-unfetch\";\nimport { useRouter } from \"next/router\"; //import { networkAction, setAppMessage } from \"../../redux/actions\";\n//import AppMessage from \"../../models/app-message\";\n\nvar Free = function Free(_ref) {\n  _s();\n\n  var course = _ref.course,\n      auth = _ref.auth,\n      dispatch = _ref.dispatch,\n      address = _ref.address;\n  var router = useRouter();\n\n  var _useState = useState(false),\n      disabled = _useState[0],\n      setDisabled = _useState[1];\n\n  var handleClick = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var initiatePaymentResponse;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              setDisabled(true); //dispatch(networkAction(true));\n\n              _context.next = 4;\n              return makePaymentRequest({\n                courseId: course.id,\n                backend: address.backend,\n                token: auth.token,\n                dispatch: dispatch\n              });\n\n            case 4:\n              initiatePaymentResponse = _context.sent;\n\n              if (!(initiatePaymentResponse.status === 401)) {\n                _context.next = 8;\n                break;\n              }\n\n              router.push(\"/login?redirect=\".concat(router.asPath));\n              return _context.abrupt(\"return\");\n\n            case 8:\n              _context.next = 10;\n              return initiatePaymentResponse.json();\n\n            case 10:\n              initiatePaymentResponse = _context.sent;\n\n              if (initiatePaymentResponse.status === \"success\") {\n                router.reload();\n              } else if (initiatePaymentResponse.status === \"failed\") {//dispatch(setAppMessage(new AppMessage(initiatePaymentResponse.error)));\n              }\n\n              _context.next = 16;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](0);\n\n            case 16:\n              _context.prev = 16;\n              dispatch(networkAction(false));\n              setDisabled(false);\n              return _context.finish(16);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 14, 16, 20]]);\n    }));\n\n    return function handleClick() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var makePaymentRequest = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3) {\n      var courseId, backend, token, dispatch, formData, res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              courseId = _ref3.courseId, backend = _ref3.backend, token = _ref3.token, dispatch = _ref3.dispatch;\n              formData = new window.FormData();\n              formData.append(\"courseid\", courseId);\n              _context2.next = 5;\n              return fetch(\"\".concat(backend, \"/payment/initiate\"), {\n                method: \"POST\",\n                headers: {\n                  Authorization: \"Bearer \".concat(token)\n                },\n                body: formData\n              });\n\n            case 5:\n              res = _context2.sent;\n              return _context2.abrupt(\"return\", res);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function makePaymentRequest(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: handleClick,\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: disabled,\n    children: ENROLL_BUTTON_TEXT\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Free, \"J5/6w2tdf0+oecE/ykqK1EcOX9U=\", false, function () {\n  return [useRouter];\n});\n\n_c = Free;\nFree.propTypes = {\n  course: publicCourse.isRequired,\n  auth: authProps,\n  dispatch: PropTypes.func.isRequired,\n  address: addressProps\n}; //const mapStateToProps = (state) => ({auth: state.auth,address: state.address,})\n//const mapDispatchToProps = (dispatch) => ({dispatch: dispatch,});\n//export default connect(mapStateToProps, mapDispatchToProps)(Free);\n\nexport default Free;\n\nvar _c;\n\n$RefreshReg$(_c, \"Free\");","map":{"version":3,"sources":["C:/Users/MGS/Sistemas/temp/courselit/packages/blog/components/CheckoutExternal/Free.js"],"names":["React","useState","PropTypes","Button","addressProps","authProps","publicCourse","ENROLL_BUTTON_TEXT","fetch","useRouter","Free","course","auth","dispatch","address","router","disabled","setDisabled","handleClick","makePaymentRequest","courseId","id","backend","token","initiatePaymentResponse","status","push","asPath","json","reload","networkAction","formData","window","FormData","append","method","headers","Authorization","body","res","propTypes","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { addressProps, authProps, publicCourse } from \"../../types\";\r\nimport { ENROLL_BUTTON_TEXT } from \"../../config/strings\";\r\n//import { connect } from \"react-redux\";\r\nimport fetch from \"isomorphic-unfetch\";\r\nimport { useRouter } from \"next/router\";\r\n//import { networkAction, setAppMessage } from \"../../redux/actions\";\r\n//import AppMessage from \"../../models/app-message\";\r\n\r\nconst Free = ({ course, auth, dispatch, address }) => {\r\n  const router = useRouter();\r\n  const [disabled, setDisabled] = useState(false);\r\n\r\n  const handleClick = async () => {\r\n    try {\r\n      setDisabled(true);\r\n      //dispatch(networkAction(true));\r\n\r\n      let initiatePaymentResponse = await makePaymentRequest({\r\n        courseId: course.id,\r\n        backend: address.backend,\r\n        token: auth.token,\r\n        dispatch,\r\n      });\r\n\r\n      if (initiatePaymentResponse.status === 401) {\r\n        router.push(`/login?redirect=${router.asPath}`);\r\n        return;\r\n      }\r\n\r\n      initiatePaymentResponse = await initiatePaymentResponse.json();\r\n      if (initiatePaymentResponse.status === \"success\") {\r\n        router.reload();\r\n      } else if (initiatePaymentResponse.status === \"failed\") {\r\n        //dispatch(setAppMessage(new AppMessage(initiatePaymentResponse.error)));\r\n      }\r\n    } catch (err) {\r\n      //dispatch(setAppMessage(new AppMessage(err.message)));\r\n    } finally {\r\n      dispatch(networkAction(false));\r\n      setDisabled(false);\r\n    }\r\n  };\r\n\r\n  const makePaymentRequest = async ({ courseId, backend, token, dispatch }) => {\r\n    const formData = new window.FormData();\r\n    formData.append(\"courseid\", courseId);\r\n\r\n    const res = await fetch(`${backend}/payment/initiate`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: formData,\r\n    });\r\n\r\n    return res;\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      onClick={handleClick}\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      disabled={disabled}\r\n    >\r\n      {ENROLL_BUTTON_TEXT}\r\n    </Button>\r\n  );\r\n};\r\n\r\nFree.propTypes = {\r\n  course: publicCourse.isRequired,\r\n  auth: authProps,\r\n  dispatch: PropTypes.func.isRequired,\r\n  address: addressProps,\r\n};\r\n\r\n//const mapStateToProps = (state) => ({auth: state.auth,address: state.address,})\r\n//const mapDispatchToProps = (dispatch) => ({dispatch: dispatch,});\r\n//export default connect(mapStateToProps, mapDispatchToProps)(Free);\r\nexport default Free\r\n"]},"metadata":{},"sourceType":"module"}