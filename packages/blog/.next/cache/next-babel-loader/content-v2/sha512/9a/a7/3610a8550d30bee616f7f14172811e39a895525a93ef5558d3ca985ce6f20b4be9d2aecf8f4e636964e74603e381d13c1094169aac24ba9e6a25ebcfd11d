{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\MGS\\\\Sistemas\\\\temp\\\\courselit\\\\packages\\\\blog\\\\components\\\\CheckoutExternal\\\\Free.js\";\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"@material-ui/core\";\nimport { addressProps, authProps, publicCourse } from \"../../types\";\nimport { ENROLL_BUTTON_TEXT } from \"../../config/strings\"; //import { connect } from \"react-redux\";\n\nimport fetch from \"isomorphic-unfetch\";\nimport { useRouter } from \"next/router\"; //import { networkAction, setAppMessage } from \"../../redux/actions\";\n//import AppMessage from \"../../models/app-message\";\n\nconst Free = ({\n  course,\n  auth,\n  dispatch,\n  address\n}) => {\n  const router = useRouter();\n  const {\n    0: disabled,\n    1: setDisabled\n  } = useState(false);\n\n  const handleClick = async () => {\n    try {\n      setDisabled(true); //dispatch(networkAction(true));\n\n      let initiatePaymentResponse = await makePaymentRequest({\n        courseId: course.id,\n        backend: address.backend,\n        token: auth.token,\n        dispatch\n      });\n\n      if (initiatePaymentResponse.status === 401) {\n        router.push(`/login?redirect=${router.asPath}`);\n        return;\n      }\n\n      initiatePaymentResponse = await initiatePaymentResponse.json();\n\n      if (initiatePaymentResponse.status === \"success\") {\n        router.reload();\n      } else if (initiatePaymentResponse.status === \"failed\") {//dispatch(setAppMessage(new AppMessage(initiatePaymentResponse.error)));\n      }\n    } catch (err) {//dispatch(setAppMessage(new AppMessage(err.message)));\n    } finally {\n      dispatch(networkAction(false));\n      setDisabled(false);\n    }\n  };\n\n  const makePaymentRequest = async ({\n    courseId,\n    backend,\n    token,\n    dispatch\n  }) => {\n    const formData = new window.FormData();\n    formData.append(\"courseid\", courseId);\n    const res = await fetch(`${backend}/payment/initiate`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      body: formData\n    });\n    return res;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: handleClick,\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: disabled,\n    children: ENROLL_BUTTON_TEXT\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\nFree.propTypes = {\n  course: publicCourse.isRequired,\n  auth: authProps,\n  dispatch: PropTypes.func.isRequired,\n  address: addressProps\n}; //const mapStateToProps = (state) => ({auth: state.auth,address: state.address,})\n//const mapDispatchToProps = (dispatch) => ({dispatch: dispatch,});\n//export default connect(mapStateToProps, mapDispatchToProps)(Free);\n\nexport default Free;","map":{"version":3,"sources":["C:/Users/MGS/Sistemas/temp/courselit/packages/blog/components/CheckoutExternal/Free.js"],"names":["React","useState","PropTypes","Button","addressProps","authProps","publicCourse","ENROLL_BUTTON_TEXT","fetch","useRouter","Free","course","auth","dispatch","address","router","disabled","setDisabled","handleClick","initiatePaymentResponse","makePaymentRequest","courseId","id","backend","token","status","push","asPath","json","reload","err","networkAction","formData","window","FormData","append","res","method","headers","Authorization","body","propTypes","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { addressProps, authProps, publicCourse } from \"../../types\";\r\nimport { ENROLL_BUTTON_TEXT } from \"../../config/strings\";\r\n//import { connect } from \"react-redux\";\r\nimport fetch from \"isomorphic-unfetch\";\r\nimport { useRouter } from \"next/router\";\r\n//import { networkAction, setAppMessage } from \"../../redux/actions\";\r\n//import AppMessage from \"../../models/app-message\";\r\n\r\nconst Free = ({ course, auth, dispatch, address }) => {\r\n  const router = useRouter();\r\n  const [disabled, setDisabled] = useState(false);\r\n\r\n  const handleClick = async () => {\r\n    try {\r\n      setDisabled(true);\r\n      //dispatch(networkAction(true));\r\n\r\n      let initiatePaymentResponse = await makePaymentRequest({\r\n        courseId: course.id,\r\n        backend: address.backend,\r\n        token: auth.token,\r\n        dispatch,\r\n      });\r\n\r\n      if (initiatePaymentResponse.status === 401) {\r\n        router.push(`/login?redirect=${router.asPath}`);\r\n        return;\r\n      }\r\n\r\n      initiatePaymentResponse = await initiatePaymentResponse.json();\r\n      if (initiatePaymentResponse.status === \"success\") {\r\n        router.reload();\r\n      } else if (initiatePaymentResponse.status === \"failed\") {\r\n        //dispatch(setAppMessage(new AppMessage(initiatePaymentResponse.error)));\r\n      }\r\n    } catch (err) {\r\n      //dispatch(setAppMessage(new AppMessage(err.message)));\r\n    } finally {\r\n      dispatch(networkAction(false));\r\n      setDisabled(false);\r\n    }\r\n  };\r\n\r\n  const makePaymentRequest = async ({ courseId, backend, token, dispatch }) => {\r\n    const formData = new window.FormData();\r\n    formData.append(\"courseid\", courseId);\r\n\r\n    const res = await fetch(`${backend}/payment/initiate`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: formData,\r\n    });\r\n\r\n    return res;\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      onClick={handleClick}\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      disabled={disabled}\r\n    >\r\n      {ENROLL_BUTTON_TEXT}\r\n    </Button>\r\n  );\r\n};\r\n\r\nFree.propTypes = {\r\n  course: publicCourse.isRequired,\r\n  auth: authProps,\r\n  dispatch: PropTypes.func.isRequired,\r\n  address: addressProps,\r\n};\r\n\r\n//const mapStateToProps = (state) => ({auth: state.auth,address: state.address,})\r\n//const mapDispatchToProps = (dispatch) => ({dispatch: dispatch,});\r\n//export default connect(mapStateToProps, mapDispatchToProps)(Free);\r\nexport default Free\r\n"]},"metadata":{},"sourceType":"module"}