{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\MGS\\\\Sistemas\\\\temp\\\\courselit\\\\packages\\\\blog\\\\pages\\\\post\\\\[id]\\\\[slug].js\";\n//import { connect } from \"react-redux\";\nimport { formulateMediaUrl, formulateCourseUrl, getBackendAddress } from \"../../../lib/utils.js\";\nimport { makeStyles, Grid } from \"@material-ui/core\";\nimport Head from \"next/head\";\nimport FetchBuilder from \"../../../lib/fetch.js\"; //import { addressProps, siteInfoProps } from \"../../../types.js\";\n\nimport dynamic from \"next/dynamic\";\nconst BaseLayout = dynamic(() => import(\"../../../components/Public/BaseLayout\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../../../components/Public/BaseLayout\")],\n    modules: [\"../../../components/Public/BaseLayout\"]\n  }\n});\nconst Article = dynamic(() => import(\"../../../components/Public/Article.js\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../../../components/Public/Article.js\")],\n    modules: [\"../../../components/Public/Article.js\"]\n  }\n});\nconst useStyles = makeStyles(theme => ({\n  content: {\n    padding: theme.spacing(2),\n    marginBottom: theme.spacing(4)\n  }\n}));\n\nconst Post = props => {\n  var _props$post, _props$address, _props$address2;\n\n  const classes = useStyles();\n  const articleOptions = {\n    showAttribution: true\n  };\n  return /*#__PURE__*/_jsxDEV(BaseLayout, {\n    title: (_props$post = props.post) === null || _props$post === void 0 ? void 0 : _props$post.title,\n    children: props.post && /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      className: classes.content,\n      children: [/*#__PURE__*/_jsxDEV(Head, {\n        children: [/*#__PURE__*/_jsxDEV(\"meta\", {\n          property: \"og:url\",\n          content: formulateCourseUrl(props.post, (props === null || props === void 0 ? void 0 : (_props$address = props.address) === null || _props$address === void 0 ? void 0 : _props$address.frontend) || 'localhost:8000')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n          property: \"og:type\",\n          content: \"article\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n          property: \"og:title\",\n          content: props.post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n          property: \"og:author\",\n          content: props.post.creatorName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), props.post.featuredImage && /*#__PURE__*/_jsxDEV(\"meta\", {\n          property: \"og:image\",\n          content: formulateMediaUrl((props === null || props === void 0 ? void 0 : (_props$address2 = props.address) === null || _props$address2 === void 0 ? void 0 : _props$address2.frontend) || 'localhost:8000', props.post.featuredImage)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Article, {\n        course: props.post,\n        options: articleOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\nconst generateQuery = (pageOffset = 1) => `\n  query {\n    courses: getPosts(offset: ${pageOffset}) {\n      id,\n      title,\n      description,\n      updated,\n      creatorName,\n      slug,\n      featuredImage,\n      courseId\n    }\n  }\n`;\n\nconst getCourses = async (backend = 'http://localhost:8000') => {\n  let courses = [];\n\n  try {\n    const fetch = new FetchBuilder().setUrl(`${backend}/graph`).setPayload(generateQuery()).setIsGraphQLEndpoint(true).build();\n    const response = await fetch.exec();\n    courses = response.courses;\n  } catch (e) {}\n\n  return courses;\n};\n\nexport const getStaticPaths = async () => {\n  const post = await getCourses();\n  return {\n    paths: post === null || post === void 0 ? void 0 : post.map(data => ({\n      params: {\n        id: data === null || data === void 0 ? void 0 : data.courseId.toString(),\n        slug: data === null || data === void 0 ? void 0 : data.slug\n      }\n    })),\n    fallback: true //SE A PAGINA NÃO EXISTIR ENTÃO, GERAR NOVAMENTE\n\n  };\n};\nexport async function getStaticProps({\n  params\n}) {\n  const graphQuery = `\n    query {\n      post: getCourse(courseId: ${params.id}) {\n          id,\n          title,\n          description,\n          featuredImage,\n          updated,\n          creatorName,\n          creatorId,\n          slug,\n          isBlog,\n          courseId,\n      }\n    }\n  `;\n  const fetch = new FetchBuilder() //.setUrl(`${getBackendAddress(req?.headers.host)}/graph`)\n  .setUrl(`${'http://localhost:8000'}/graph`).setPayload(graphQuery).setIsGraphQLEndpoint(true).build();\n  let post = null;\n\n  try {\n    const response = await fetch.exec();\n    post = response.post;\n  } catch (err) {\n    post = {\n      title: err.message\n    };\n  }\n\n  return {\n    props: {\n      post\n    }\n  };\n} //export async function getServerSideProps({ query, req }) {\n//  //export async function getStaticProps({ params }) {\n//  console.log('queryquery', query)\n//  console.log(`${getBackendAddress(req?.headers.host)}/graph`, 'howtst')\n//  const graphQuery = `\n//      query {\n//        post: getCourse(courseId: ${query.id}) {\n//            id,\n//            title,\n//            description,\n//            featuredImage,\n//            updated,\n//            creatorName,\n//            creatorId,\n//            slug,\n//            isBlog,\n//            courseId,\n//        }\n//      }\n//    `;\n//  const fetch = new FetchBuilder()\n//    .setUrl(`${getBackendAddress(req?.headers.host)}/graph`)\n//    //.setUrl(`${'localhost:3002'}/graph`)\n//    .setPayload(graphQuery)\n//    .setIsGraphQLEndpoint(true)\n//    .build();\n//  let post = null;\n//  try {\n//    const response = await fetch.exec();\n//    post = response.post;\n//  } catch (err) {\n//    post = {\n//      title: err.message,\n//    };\n//  }\n//  return {\n//    props: {\n//      post,\n//    },\n//  };\n//}\n//Post.propTypes = {\n//  siteInfo: siteInfoProps,\n//  address: addressProps,\n//};\n//const mapStateToProps = (state) => ({siteInfo: state.siteinfo,address: state.address,});\n//export default connect(mapStateToProps)(Post);\n\nexport default Post;","map":{"version":3,"sources":["C:/Users/MGS/Sistemas/temp/courselit/packages/blog/pages/post/[id]/[slug].js"],"names":["formulateMediaUrl","formulateCourseUrl","getBackendAddress","makeStyles","Grid","Head","FetchBuilder","dynamic","BaseLayout","Article","useStyles","theme","content","padding","spacing","marginBottom","Post","props","classes","articleOptions","showAttribution","post","title","address","frontend","creatorName","featuredImage","generateQuery","pageOffset","getCourses","backend","courses","fetch","setUrl","setPayload","setIsGraphQLEndpoint","build","response","exec","e","getStaticPaths","paths","map","data","params","id","courseId","toString","slug","fallback","getStaticProps","graphQuery","err","message"],"mappings":"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","sourcesContent":["//import { connect } from \"react-redux\";\r\nimport {\r\n  formulateMediaUrl,\r\n  formulateCourseUrl,\r\n  getBackendAddress,\r\n} from \"../../../lib/utils.js\";\r\nimport { makeStyles, Grid } from \"@material-ui/core\";\r\nimport Head from \"next/head\";\r\nimport FetchBuilder from \"../../../lib/fetch.js\";\r\n//import { addressProps, siteInfoProps } from \"../../../types.js\";\r\nimport dynamic from \"next/dynamic\";\r\n\r\nconst BaseLayout = dynamic(() =>\r\n  import(\"../../../components/Public/BaseLayout\")\r\n);\r\nconst Article = dynamic(() => import(\"../../../components/Public/Article.js\"));\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  content: {\r\n    padding: theme.spacing(2),\r\n    marginBottom: theme.spacing(4),\r\n  },\r\n}))\r\n\r\nconst Post = (props) => {\r\n  const classes = useStyles();\r\n  const articleOptions = {\r\n    showAttribution: true,\r\n  };\r\n\r\n  return (\r\n    <BaseLayout title={props.post?.title}>\r\n      {props.post && (\r\n        <Grid item xs={12} className={classes.content}>\r\n          <Head>\r\n            <meta\r\n              property=\"og:url\"\r\n              content={formulateCourseUrl(props.post,\r\n                props?.address?.frontend || 'localhost:8000'\r\n              )}\r\n            />\r\n            <meta property=\"og:type\" content=\"article\" />\r\n            <meta property=\"og:title\" content={props.post.title} />\r\n            {/** TODO: re-enable the following meta tag once SSR is supported */}\r\n            {/* <meta\r\n              property=\"og:description\"\r\n              content={getPostDescriptionSnippet(props.post.description)}\r\n            /> */}\r\n            <meta property=\"og:author\" content={props.post.creatorName} />\r\n            {props.post.featuredImage && (\r\n              <meta\r\n                property=\"og:image\"\r\n                content={formulateMediaUrl(\r\n                  props?.address?.frontend || 'localhost:8000',\r\n                  props.post.featuredImage\r\n                )}\r\n              />\r\n            )}\r\n          </Head>\r\n          <Article course={props.post} options={articleOptions} />\r\n        </Grid>\r\n      )}\r\n    </BaseLayout>\r\n  );\r\n}\r\n\r\nconst generateQuery = (pageOffset = 1) => `\r\n  query {\r\n    courses: getPosts(offset: ${pageOffset}) {\r\n      id,\r\n      title,\r\n      description,\r\n      updated,\r\n      creatorName,\r\n      slug,\r\n      featuredImage,\r\n      courseId\r\n    }\r\n  }\r\n`;\r\nconst getCourses = async (backend = 'http://localhost:8000') => {\r\n  let courses = [];\r\n  try {\r\n    const fetch = new FetchBuilder()\r\n      .setUrl(`${backend}/graph`)\r\n      .setPayload(generateQuery())\r\n      .setIsGraphQLEndpoint(true)\r\n      .build();\r\n    const response = await fetch.exec();\r\n    courses = response.courses;\r\n  } catch (e) { }\r\n  return courses;\r\n};\r\n\r\nexport const getStaticPaths = async () => {\r\n  const post = await getCourses()\r\n  return {\r\n    paths: post?.map(data => ({ params: { id: data?.courseId.toString(), slug: data?.slug } })),\r\n    fallback: true, //SE A PAGINA NÃO EXISTIR ENTÃO, GERAR NOVAMENTE\r\n  };\r\n};\r\n\r\nexport async function getStaticProps({ params }) {\r\n  const graphQuery = `\r\n    query {\r\n      post: getCourse(courseId: ${params.id}) {\r\n          id,\r\n          title,\r\n          description,\r\n          featuredImage,\r\n          updated,\r\n          creatorName,\r\n          creatorId,\r\n          slug,\r\n          isBlog,\r\n          courseId,\r\n      }\r\n    }\r\n  `;\r\n  const fetch = new FetchBuilder()\r\n    //.setUrl(`${getBackendAddress(req?.headers.host)}/graph`)\r\n    .setUrl(`${'http://localhost:8000'}/graph`)\r\n    .setPayload(graphQuery)\r\n    .setIsGraphQLEndpoint(true)\r\n    .build();\r\n\r\n  let post = null;\r\n  try {\r\n    const response = await fetch.exec();\r\n    post = response.post;\r\n  } catch (err) {\r\n    post = {\r\n      title: err.message,\r\n    };\r\n  }\r\n  return {\r\n    props: {\r\n      post,\r\n    },\r\n  };\r\n}\r\n\r\n\r\n\r\n//export async function getServerSideProps({ query, req }) {\r\n//  //export async function getStaticProps({ params }) {\r\n//  console.log('queryquery', query)\r\n//  console.log(`${getBackendAddress(req?.headers.host)}/graph`, 'howtst')\r\n//  const graphQuery = `\r\n//      query {\r\n//        post: getCourse(courseId: ${query.id}) {\r\n//            id,\r\n//            title,\r\n//            description,\r\n//            featuredImage,\r\n//            updated,\r\n//            creatorName,\r\n//            creatorId,\r\n//            slug,\r\n//            isBlog,\r\n//            courseId,\r\n//        }\r\n//      }\r\n//    `;\r\n//  const fetch = new FetchBuilder()\r\n//    .setUrl(`${getBackendAddress(req?.headers.host)}/graph`)\r\n//    //.setUrl(`${'localhost:3002'}/graph`)\r\n//    .setPayload(graphQuery)\r\n//    .setIsGraphQLEndpoint(true)\r\n//    .build();\r\n\r\n//  let post = null;\r\n//  try {\r\n//    const response = await fetch.exec();\r\n//    post = response.post;\r\n//  } catch (err) {\r\n//    post = {\r\n//      title: err.message,\r\n//    };\r\n//  }\r\n\r\n//  return {\r\n//    props: {\r\n//      post,\r\n//    },\r\n//  };\r\n//}\r\n\r\n\r\n\r\n//Post.propTypes = {\r\n//  siteInfo: siteInfoProps,\r\n//  address: addressProps,\r\n//};\r\n//const mapStateToProps = (state) => ({siteInfo: state.siteinfo,address: state.address,});\r\n//export default connect(mapStateToProps)(Post);\r\nexport default Post;\r\n"]},"metadata":{},"sourceType":"module"}