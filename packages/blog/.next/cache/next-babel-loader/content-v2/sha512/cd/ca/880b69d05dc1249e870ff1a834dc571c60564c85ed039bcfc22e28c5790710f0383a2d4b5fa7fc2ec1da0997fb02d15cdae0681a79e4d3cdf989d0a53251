{"ast":null,"code":"/**\r\n * A utility class to make network calls and intercept the response. It is\r\n * useful for cases like redirection to the login page if the server returned\r\n * a 401 etc.\r\n */\nimport fetch from \"isomorphic-unfetch\";\nimport Router from \"next/router\";\n\nconst Fetch = function (url, payload, token, isGraphQLEndpoint) {\n  this.url = url;\n  this.payload = payload;\n  this.token = token;\n  this.isGraphQLEndpoint = isGraphQLEndpoint;\n};\n\nFetch.prototype.exec = async function () {\n  const fetchOptions = {\n    method: \"POST\",\n    headers: {}\n  };\n\n  if (this.token) {\n    fetchOptions.headers.Authorization = `Bearer ${this.token}`;\n  }\n\n  if (this.isGraphQLEndpoint) {\n    fetchOptions.headers[\"Content-Type\"] = \"application/json\";\n    fetchOptions.body = JSON.stringify({\n      query: this.payload\n    });\n  } else {\n    fetchOptions.body = this.payload;\n  }\n\n  let response = await fetch(this.url, fetchOptions);\n\n  if (response.status === 401) {\n    Router.push(\"/logout\");\n    return {};\n  }\n\n  response = await response.json();\n\n  if (response.errors && response.errors.length > 0) {\n    throw new Error(response.errors[0].message);\n  }\n\n  return this.isGraphQLEndpoint ? response.data : response;\n};\n\nconst FetchBuilder = function () {\n  return {\n    setUrl: function (url) {\n      this.url = url;\n      return this;\n    },\n    setPayload: function (payload) {\n      this.payload = payload;\n      return this;\n    },\n    setAuthToken: function (token) {\n      this.token = token;\n      return this;\n    },\n    setIsGraphQLEndpoint: function (isGraphQLEndpoint) {\n      this.isGraphQLEndpoint = isGraphQLEndpoint;\n      return this;\n    },\n    build: function () {\n      return new Fetch(this.url, this.payload, this.token, this.isGraphQLEndpoint);\n    }\n  };\n};\n\nexport default FetchBuilder;","map":null,"metadata":{},"sourceType":"module"}