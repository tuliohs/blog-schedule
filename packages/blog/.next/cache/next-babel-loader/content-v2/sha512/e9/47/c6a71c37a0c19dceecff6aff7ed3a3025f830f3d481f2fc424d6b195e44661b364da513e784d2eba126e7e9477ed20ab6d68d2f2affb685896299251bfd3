{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/MGS/Sistemas/temp/courselit/packages/blog/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/MGS/Sistemas/temp/courselit/packages/blog/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\r\n * A utility class to make network calls and intercept the response. It is\r\n * useful for cases like redirection to the login page if the server returned\r\n * a 401 etc.\r\n */\nimport fetch from \"isomorphic-unfetch\";\nimport Router from \"next/router\";\n\nvar Fetch = function Fetch(url, payload, token, isGraphQLEndpoint) {\n  this.url = url;\n  this.payload = payload;\n  this.token = token;\n  this.isGraphQLEndpoint = isGraphQLEndpoint;\n};\n\n_c = Fetch;\nFetch.prototype.exec = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var fetchOptions, response;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          fetchOptions = {\n            method: \"POST\",\n            headers: {}\n          };\n\n          if (this.token) {\n            fetchOptions.headers.Authorization = \"Bearer \".concat(this.token);\n          }\n\n          if (this.isGraphQLEndpoint) {\n            fetchOptions.headers[\"Content-Type\"] = \"application/json\";\n            fetchOptions.body = JSON.stringify({\n              query: this.payload\n            });\n          } else {\n            fetchOptions.body = this.payload;\n          }\n\n          _context.next = 5;\n          return fetch(this.url, fetchOptions);\n\n        case 5:\n          response = _context.sent;\n\n          if (!(response.status === 401)) {\n            _context.next = 9;\n            break;\n          }\n\n          Router.push(\"/logout\");\n          return _context.abrupt(\"return\", {});\n\n        case 9:\n          _context.next = 11;\n          return response.json();\n\n        case 11:\n          response = _context.sent;\n\n          if (!(response.errors && response.errors.length > 0)) {\n            _context.next = 14;\n            break;\n          }\n\n          throw new Error(response.errors[0].message);\n\n        case 14:\n          return _context.abrupt(\"return\", this.isGraphQLEndpoint ? response.data : response);\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee, this);\n}));\n\nvar FetchBuilder = function FetchBuilder() {\n  return {\n    setUrl: function setUrl(url) {\n      this.url = url;\n      return this;\n    },\n    setPayload: function setPayload(payload) {\n      this.payload = payload;\n      return this;\n    },\n    setAuthToken: function setAuthToken(token) {\n      this.token = token;\n      return this;\n    },\n    setIsGraphQLEndpoint: function setIsGraphQLEndpoint(isGraphQLEndpoint) {\n      this.isGraphQLEndpoint = isGraphQLEndpoint;\n      return this;\n    },\n    build: function build() {\n      return new Fetch(this.url, this.payload, this.token, this.isGraphQLEndpoint);\n    }\n  };\n};\n\n_c2 = FetchBuilder;\nexport default FetchBuilder;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Fetch\");\n$RefreshReg$(_c2, \"FetchBuilder\");","map":{"version":3,"sources":["C:/Users/MGS/Sistemas/temp/courselit/packages/blog/lib/fetch.js"],"names":["fetch","Router","Fetch","url","payload","token","isGraphQLEndpoint","prototype","exec","fetchOptions","method","headers","Authorization","body","JSON","stringify","query","response","status","push","json","errors","length","Error","message","data","FetchBuilder","setUrl","setPayload","setAuthToken","setIsGraphQLEndpoint","build"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAUC,GAAV,EAAeC,OAAf,EAAwBC,KAAxB,EAA+BC,iBAA/B,EAAkD;AAC9D,OAAKH,GAAL,GAAWA,GAAX;AACA,OAAKC,OAAL,GAAeA,OAAf;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKC,iBAAL,GAAyBA,iBAAzB;AACD,CALD;;KAAMJ,K;AAONA,KAAK,CAACK,SAAN,CAAgBC,IAAhB,yEAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,UAAAA,YADe,GACA;AACnBC,YAAAA,MAAM,EAAE,MADW;AAEnBC,YAAAA,OAAO,EAAE;AAFU,WADA;;AAMrB,cAAI,KAAKN,KAAT,EAAgB;AACdI,YAAAA,YAAY,CAACE,OAAb,CAAqBC,aAArB,oBAA+C,KAAKP,KAApD;AACD;;AAED,cAAI,KAAKC,iBAAT,EAA4B;AAC1BG,YAAAA,YAAY,CAACE,OAAb,CAAqB,cAArB,IAAuC,kBAAvC;AACAF,YAAAA,YAAY,CAACI,IAAb,GAAoBC,IAAI,CAACC,SAAL,CAAe;AAAEC,cAAAA,KAAK,EAAE,KAAKZ;AAAd,aAAf,CAApB;AACD,WAHD,MAGO;AACLK,YAAAA,YAAY,CAACI,IAAb,GAAoB,KAAKT,OAAzB;AACD;;AAfoB;AAAA,iBAiBAJ,KAAK,CAAC,KAAKG,GAAN,EAAWM,YAAX,CAjBL;;AAAA;AAiBjBQ,UAAAA,QAjBiB;;AAAA,gBAmBjBA,QAAQ,CAACC,MAAT,KAAoB,GAnBH;AAAA;AAAA;AAAA;;AAoBnBjB,UAAAA,MAAM,CAACkB,IAAP,CAAY,SAAZ;AApBmB,2CAqBZ,EArBY;;AAAA;AAAA;AAAA,iBAwBJF,QAAQ,CAACG,IAAT,EAxBI;;AAAA;AAwBrBH,UAAAA,QAxBqB;;AAAA,gBA0BjBA,QAAQ,CAACI,MAAT,IAAmBJ,QAAQ,CAACI,MAAT,CAAgBC,MAAhB,GAAyB,CA1B3B;AAAA;AAAA;AAAA;;AAAA,gBA2Bb,IAAIC,KAAJ,CAAUN,QAAQ,CAACI,MAAT,CAAgB,CAAhB,EAAmBG,OAA7B,CA3Ba;;AAAA;AAAA,2CA8Bd,KAAKlB,iBAAL,GAAyBW,QAAQ,CAACQ,IAAlC,GAAyCR,QA9B3B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAiCA,IAAMS,YAAY,GAAG,SAAfA,YAAe,GAAY;AAC/B,SAAO;AACLC,IAAAA,MAAM,EAAE,gBAAUxB,GAAV,EAAe;AACrB,WAAKA,GAAL,GAAWA,GAAX;AACA,aAAO,IAAP;AACD,KAJI;AAKLyB,IAAAA,UAAU,EAAE,oBAAUxB,OAAV,EAAmB;AAC7B,WAAKA,OAAL,GAAeA,OAAf;AACA,aAAO,IAAP;AACD,KARI;AASLyB,IAAAA,YAAY,EAAE,sBAAUxB,KAAV,EAAiB;AAC7B,WAAKA,KAAL,GAAaA,KAAb;AACA,aAAO,IAAP;AACD,KAZI;AAaLyB,IAAAA,oBAAoB,EAAE,8BAAUxB,iBAAV,EAA6B;AACjD,WAAKA,iBAAL,GAAyBA,iBAAzB;AACA,aAAO,IAAP;AACD,KAhBI;AAiBLyB,IAAAA,KAAK,EAAE,iBAAY;AACjB,aAAO,IAAI7B,KAAJ,CACL,KAAKC,GADA,EAEL,KAAKC,OAFA,EAGL,KAAKC,KAHA,EAIL,KAAKC,iBAJA,CAAP;AAMD;AAxBI,GAAP;AA0BD,CA3BD;;MAAMoB,Y;AA6BN,eAAeA,YAAf","sourcesContent":["/**\r\n * A utility class to make network calls and intercept the response. It is\r\n * useful for cases like redirection to the login page if the server returned\r\n * a 401 etc.\r\n */\r\n\r\nimport fetch from \"isomorphic-unfetch\";\r\nimport Router from \"next/router\";\r\n\r\nconst Fetch = function (url, payload, token, isGraphQLEndpoint) {\r\n  this.url = url;\r\n  this.payload = payload;\r\n  this.token = token;\r\n  this.isGraphQLEndpoint = isGraphQLEndpoint;\r\n};\r\n\r\nFetch.prototype.exec = async function () {\r\n  const fetchOptions = {\r\n    method: \"POST\",\r\n    headers: {},\r\n  };\r\n\r\n  if (this.token) {\r\n    fetchOptions.headers.Authorization = `Bearer ${this.token}`;\r\n  }\r\n\r\n  if (this.isGraphQLEndpoint) {\r\n    fetchOptions.headers[\"Content-Type\"] = \"application/json\";\r\n    fetchOptions.body = JSON.stringify({ query: this.payload });\r\n  } else {\r\n    fetchOptions.body = this.payload;\r\n  }\r\n\r\n  let response = await fetch(this.url, fetchOptions);\r\n\r\n  if (response.status === 401) {\r\n    Router.push(\"/logout\");\r\n    return {};\r\n  }\r\n\r\n  response = await response.json();\r\n\r\n  if (response.errors && response.errors.length > 0) {\r\n    throw new Error(response.errors[0].message);\r\n  }\r\n\r\n  return this.isGraphQLEndpoint ? response.data : response;\r\n};\r\n\r\nconst FetchBuilder = function () {\r\n  return {\r\n    setUrl: function (url) {\r\n      this.url = url;\r\n      return this;\r\n    },\r\n    setPayload: function (payload) {\r\n      this.payload = payload;\r\n      return this;\r\n    },\r\n    setAuthToken: function (token) {\r\n      this.token = token;\r\n      return this;\r\n    },\r\n    setIsGraphQLEndpoint: function (isGraphQLEndpoint) {\r\n      this.isGraphQLEndpoint = isGraphQLEndpoint;\r\n      return this;\r\n    },\r\n    build: function () {\r\n      return new Fetch(\r\n        this.url,\r\n        this.payload,\r\n        this.token,\r\n        this.isGraphQLEndpoint\r\n      );\r\n    },\r\n  };\r\n};\r\n\r\nexport default FetchBuilder;\r\n"]},"metadata":{},"sourceType":"module"}