{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/MGS/Sistemas/temp/courselit/packages/blog/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/MGS/Sistemas/temp/courselit/packages/blog/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\r\n * A utility class to make network calls and intercept the response. It is\r\n * useful for cases like redirection to the login page if the server returned\r\n * a 401 etc.\r\n */\nimport fetch from \"isomorphic-unfetch\";\nimport Router from \"next/router\";\n\nvar Fetch = function Fetch(url, payload, token, isGraphQLEndpoint) {\n  this.url = url;\n  this.payload = payload;\n  this.token = token;\n  this.isGraphQLEndpoint = isGraphQLEndpoint;\n};\n\nFetch.prototype.exec = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var fetchOptions, response;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          fetchOptions = {\n            method: \"POST\",\n            headers: {}\n          };\n\n          if (this.token) {\n            fetchOptions.headers.Authorization = \"Bearer \".concat(this.token);\n          }\n\n          if (this.isGraphQLEndpoint) {\n            fetchOptions.headers[\"Content-Type\"] = \"application/json\";\n            fetchOptions.body = JSON.stringify({\n              query: this.payload\n            });\n          } else {\n            fetchOptions.body = this.payload;\n          }\n\n          _context.next = 5;\n          return fetch(this.url, fetchOptions);\n\n        case 5:\n          response = _context.sent;\n\n          if (!(response.status === 401)) {\n            _context.next = 9;\n            break;\n          }\n\n          Router.push(\"/logout\");\n          return _context.abrupt(\"return\", {});\n\n        case 9:\n          _context.next = 11;\n          return response.json();\n\n        case 11:\n          response = _context.sent;\n\n          if (!(response.errors && response.errors.length > 0)) {\n            _context.next = 14;\n            break;\n          }\n\n          throw new Error(response.errors[0].message);\n\n        case 14:\n          return _context.abrupt(\"return\", this.isGraphQLEndpoint ? response.data : response);\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee, this);\n}));\n\nvar FetchBuilder = function FetchBuilder() {\n  return {\n    setUrl: function setUrl(url) {\n      this.url = url;\n      return this;\n    },\n    setPayload: function setPayload(payload) {\n      this.payload = payload;\n      return this;\n    },\n    setAuthToken: function setAuthToken(token) {\n      this.token = token;\n      return this;\n    },\n    setIsGraphQLEndpoint: function setIsGraphQLEndpoint(isGraphQLEndpoint) {\n      this.isGraphQLEndpoint = isGraphQLEndpoint;\n      return this;\n    },\n    build: function build() {\n      return new Fetch(this.url, this.payload, this.token, this.isGraphQLEndpoint);\n    }\n  };\n};\n\nexport default FetchBuilder;","map":null,"metadata":{},"sourceType":"module"}