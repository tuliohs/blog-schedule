{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\MGS\\\\Sistemas\\\\temp\\\\courselit\\\\packages\\\\blog\\\\components\\\\AppToast.js\",\n    _this = this;\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\"; //import { connect } from \"react-redux\";\n\nimport { Snackbar, IconButton, Button } from \"@material-ui/core\"; //import { clearAppMessage } from \"../redux/actions\";\n\nimport { appMessage } from \"../types\";\nimport { Close } from \"@material-ui/icons\";\n\nvar AppToast = function AppToast(props) {\n  var message = props.message;\n  var action = message && message.action;\n\n  var handleClose = function handleClose(event, reason) {\n    if (reason === \"clickaway\") {\n      return;\n    } //props.dispatch(clearAppMessage());\n\n  };\n\n  var getActionButtonsArray = function getActionButtonsArray() {\n    var actionButtonsArray = [/*#__PURE__*/_jsxDEV(IconButton, {\n      \"aria-label\": \"close\",\n      color: \"inherit\",\n      onClick: handleClose,\n      children: /*#__PURE__*/_jsxDEV(Close, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, _this)\n    }, \"close\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, _this)];\n\n    if (action) {\n      actionButtonsArray.unshift( /*#__PURE__*/_jsxDEV(Button, {\n        color: \"secondary\",\n        size: \"small\",\n        onClick: message.action.cb,\n        children: message.action.text\n      }, \"action\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, _this));\n    }\n\n    return actionButtonsArray;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: message && /*#__PURE__*/_jsxDEV(Snackbar, {\n      anchorOrigin: {\n        vertical: \"bottom\",\n        horizontal: \"left\"\n      },\n      open: message.open,\n      autoHideDuration: 6000,\n      onClose: handleClose,\n      message: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 20\n      }, _this),\n      action: getActionButtonsArray()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, _this)\n  }, void 0, false);\n}; //AppToast.propTypes = {\n//  message: appMessage.isRequired,\n//  dispatch: PropTypes.func.isRequired,\n//};\n\n\n_c = AppToast;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    message: state.message\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    dispatch: dispatch\n  };\n}; //export default connect(mapStateToProps, mapDispatchToProps)(AppToast);\n\n\nexport default AppToast;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppToast\");","map":{"version":3,"sources":["C:/Users/MGS/Sistemas/temp/courselit/packages/blog/components/AppToast.js"],"names":["React","PropTypes","Snackbar","IconButton","Button","appMessage","Close","AppToast","props","message","action","handleClose","event","reason","getActionButtonsArray","actionButtonsArray","unshift","cb","text","vertical","horizontal","open","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CACA;;AACA,SAASC,QAAT,EAAmBC,UAAnB,EAA+BC,MAA/B,QAA6C,mBAA7C,C,CACA;;AACA,SAASC,UAAT,QAA2B,UAA3B;AACA,SAASC,KAAT,QAAsB,oBAAtB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAAA,MAClBC,OADkB,GACND,KADM,CAClBC,OADkB;AAE1B,MAAMC,MAAM,GAAGD,OAAO,IAAIA,OAAO,CAACC,MAAlC;;AAEA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACrC,QAAIA,MAAM,KAAK,WAAf,EAA4B;AAC1B;AACD,KAHoC,CAKrC;;AACD,GAND;;AAQA,MAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AAClC,QAAMC,kBAAkB,GAAG,cACzB,QAAC,UAAD;AAEE,oBAAW,OAFb;AAGE,MAAA,KAAK,EAAC,SAHR;AAIE,MAAA,OAAO,EAAEJ,WAJX;AAAA,6BAME,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AANF,OACM,OADN;AAAA;AAAA;AAAA;AAAA,aADyB,CAA3B;;AAUA,QAAID,MAAJ,EAAY;AACVK,MAAAA,kBAAkB,CAACC,OAAnB,eACE,QAAC,MAAD;AAEE,QAAA,KAAK,EAAC,WAFR;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,OAAO,EAAEP,OAAO,CAACC,MAAR,CAAeO,EAJ1B;AAAA,kBAMGR,OAAO,CAACC,MAAR,CAAeQ;AANlB,SACM,QADN;AAAA;AAAA;AAAA;AAAA,eADF;AAUD;;AAED,WAAOH,kBAAP;AACD,GAzBD;;AA2BA,sBACE;AAAA,cACGN,OAAO,iBACN,QAAC,QAAD;AACE,MAAA,YAAY,EAAE;AACZU,QAAAA,QAAQ,EAAE,QADE;AAEZC,QAAAA,UAAU,EAAE;AAFA,OADhB;AAKE,MAAA,IAAI,EAAEX,OAAO,CAACY,IALhB;AAME,MAAA,gBAAgB,EAAE,IANpB;AAOE,MAAA,OAAO,EAAEV,WAPX;AAQE,MAAA,OAAO,eAAE;AAAA,kBAAOF,OAAO,CAACA;AAAf;AAAA;AAAA;AAAA;AAAA,eARX;AASE,MAAA,MAAM,EAAEK,qBAAqB;AAT/B;AAAA;AAAA;AAAA;AAAA;AAFJ,mBADF;AAiBD,CAxDD,C,CA0DA;AACA;AACA;AACA;;;KA7DMP,Q;;AA+DN,IAAMe,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAY;AAClCd,IAAAA,OAAO,EAAEc,KAAK,CAACd;AADmB,GAAZ;AAAA,CAAxB;;AAIA,IAAMe,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD;AAAA,SAAe;AACxCA,IAAAA,QAAQ,EAAEA;AAD8B,GAAf;AAAA,CAA3B,C,CAIA;;;AACA,eAAelB,QAAf","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n//import { connect } from \"react-redux\";\r\nimport { Snackbar, IconButton, Button } from \"@material-ui/core\";\r\n//import { clearAppMessage } from \"../redux/actions\";\r\nimport { appMessage } from \"../types\";\r\nimport { Close } from \"@material-ui/icons\";\r\n\r\nconst AppToast = (props) => {\r\n  const { message } = props;\r\n  const action = message && message.action;\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    //props.dispatch(clearAppMessage());\r\n  };\r\n\r\n  const getActionButtonsArray = () => {\r\n    const actionButtonsArray = [\r\n      <IconButton\r\n        key=\"close\"\r\n        aria-label=\"close\"\r\n        color=\"inherit\"\r\n        onClick={handleClose}\r\n      >\r\n        <Close />\r\n      </IconButton>,\r\n    ];\r\n    if (action) {\r\n      actionButtonsArray.unshift(\r\n        <Button\r\n          key=\"action\"\r\n          color=\"secondary\"\r\n          size=\"small\"\r\n          onClick={message.action.cb}\r\n        >\r\n          {message.action.text}\r\n        </Button>\r\n      );\r\n    }\r\n\r\n    return actionButtonsArray;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {message && (\r\n        <Snackbar\r\n          anchorOrigin={{\r\n            vertical: \"bottom\",\r\n            horizontal: \"left\",\r\n          }}\r\n          open={message.open}\r\n          autoHideDuration={6000}\r\n          onClose={handleClose}\r\n          message={<span>{message.message}</span>}\r\n          action={getActionButtonsArray()}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\n//AppToast.propTypes = {\r\n//  message: appMessage.isRequired,\r\n//  dispatch: PropTypes.func.isRequired,\r\n//};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  message: state.message,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  dispatch: dispatch,\r\n});\r\n\r\n//export default connect(mapStateToProps, mapDispatchToProps)(AppToast);\r\nexport default AppToast\r\n"]},"metadata":{},"sourceType":"module"}