{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n//import { connect } from \"react-redux\";\n//import PropTypes from \"prop-types\";\n//import { publicCourse, siteInfoProps } from \"../types.js\";\nimport defaultState from '../config/defaultState';\nimport { HEADER_BLOG_POSTS_SECTION, BTN_VIEW_ALL } from \"../config/strings.js\";\nimport { Button, Grid, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport Link from \"next/link\";\nimport FetchBuilder from \"../lib/fetch.js\";\nimport { getBackendAddress } from \"../lib/utils.js\";\nimport dynamic from \"next/dynamic\";\nimport { useContext } from \"react\";\nimport MyContext from \"../context/MyContext.js\";\nconst BaseLayout = dynamic(() => import(\"../components/Public/BaseLayout\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../components/Public/BaseLayout\")],\n    modules: [\"../components/Public/BaseLayout\"]\n  }\n});\nconst Items = dynamic(() => import(\"../components/Public/Items\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../components/Public/Items\")],\n    modules: [\"../components/Public/Items\"]\n  }\n});\nconst useStyles = makeStyles(theme => ({\n  content: {\n    [theme.breakpoints.down(\"sm\")]: {\n      padding: theme.spacing(2)\n    },\n    paddingTop: theme.spacing(2),\n    marginBottom: theme.spacing(2)\n  },\n  header: {\n    [theme.breakpoints.up(\"md\")]: {\n      marginLeft: theme.spacing(2)\n    }\n  },\n  headerTop: {\n    marginBottom: theme.spacing(2)\n  },\n  link: {\n    textDecoration: \"none\",\n    color: \"inherit\"\n  },\n  callToAction: {\n    [theme.breakpoints.up(\"md\")]: {\n      marginLeft: theme.spacing(2)\n    }\n  }\n}));\n\nconst generateQuery = (pageOffset = 1) => `\n  query {\n    courses: getPosts(offset: ${pageOffset}) {\n      id,\n      title,\n      description,\n      updated,\n      creatorName,\n      slug,\n      featuredImage,\n      courseId\n    }\n  }\n`;\n\nconst Index = props => {\n  const classes = useStyles();\n  const {\n    siteInfo\n  } = useContext(MyContext);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(BaseLayout, {\n      title: siteInfo.subtitle,\n      children: /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.content,\n        children: /*#__PURE__*/_jsx(Grid, {\n          container: true,\n          component: \"section\",\n          children: props.courses.length > 0 && /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(Grid, {\n              item: true,\n              container: true,\n              className: classes.header,\n              children: /*#__PURE__*/_jsx(Grid, {\n                item: true,\n                xs: 12,\n                className: classes.headerTop,\n                children: /*#__PURE__*/_jsx(Typography, {\n                  variant: \"h2\",\n                  children: HEADER_BLOG_POSTS_SECTION\n                })\n              })\n            }), /*#__PURE__*/_jsx(Items, {\n              generateQuery: generateQuery,\n              initialItems: props.courses,\n              posts: true\n            }), /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsx(Button, {\n                variant: \"contained\",\n                disableElevation: true,\n                className: classes.callToAction,\n                children: /*#__PURE__*/_jsx(Link, {\n                  href: \"/posts\",\n                  children: /*#__PURE__*/_jsx(\"a\", {\n                    className: classes.link,\n                    children: BTN_VIEW_ALL\n                  })\n                })\n              })\n            })]\n          })\n        })\n      })\n    })\n  });\n};\n\nconst getCourses = async backend => {\n  let courses = [];\n\n  try {\n    const fetch = new FetchBuilder().setUrl(`${backend}/graph`).setPayload(generateQuery()).setIsGraphQLEndpoint(true).build();\n    const response = await fetch.exec();\n    courses = response.courses;\n  } catch (e) {}\n\n  return courses;\n};\n\nexport async function getStaticProps() {\n  //export async function getServerSideProps(context) {\n  //const { req } = context;\n  //const courses = await getCourses(getBackendAddress(req.headers.host));\n  const courses = await getCourses(defaultState.address.backend);\n  return {\n    props: {\n      courses\n    }\n  };\n} //Index.propTypes = {\n//  courses: PropTypes.arrayOf(publicCourse),\n//  siteinfo: siteInfoProps,\n//}; \n//const mapStateToProps = (state) => ({  siteinfo: state.siteinfo,});\n//export default connect(mapStateToProps)(Index);\n\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}