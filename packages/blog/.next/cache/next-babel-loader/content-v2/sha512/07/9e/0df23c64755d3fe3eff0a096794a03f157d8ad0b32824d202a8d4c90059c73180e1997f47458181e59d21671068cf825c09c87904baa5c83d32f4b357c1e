{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\MGS\\\\Sistemas\\\\temp\\\\courselit\\\\packages\\\\blog\\\\components\\\\Public\\\\BaseLayout\\\\WidgetByName.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport widgets from \"../../../config/widgets\";\nimport FetchBuilder from \"../../../lib/fetch\";\nimport * as config from \"../../../config/constants\";\nimport * as utilities from \"../../../lib/utils\";\nimport { connect } from \"react-redux\";\nimport { addressProps } from \"../../../types\";\n\nconst WidgetByName = ({\n  name,\n  section,\n  address\n}) => {\n  const Widget = widgets[name].widget;\n  const fetch = new FetchBuilder().setUrl(`${address.backend}/graph`).setIsGraphQLEndpoint(true);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Widget, {\n      name: name,\n      fetchBuilder: fetch,\n      section: section,\n      config: Object.assign({}, config, {\n        BACKEND: address.backend\n      }),\n      utilities: utilities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\nWidgetByName.propTypes = {\n  name: PropTypes.string.isRequired,\n  section: PropTypes.string.isRequired,\n  address: addressProps\n};\n\nconst mapStateToProps = state => ({\n  address: state.address\n});\n\nexport default connect(mapStateToProps)(WidgetByName);","map":{"version":3,"sources":["C:/Users/MGS/Sistemas/temp/courselit/packages/blog/components/Public/BaseLayout/WidgetByName.js"],"names":["React","PropTypes","widgets","FetchBuilder","config","utilities","connect","addressProps","WidgetByName","name","section","address","Widget","widget","fetch","setUrl","backend","setIsGraphQLEndpoint","Object","assign","BACKEND","propTypes","string","isRequired","mapStateToProps","state"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAO,KAAKC,MAAZ,MAAwB,2BAAxB;AACA,OAAO,KAAKC,SAAZ,MAA2B,oBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,gBAA7B;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,OAAR;AAAiBC,EAAAA;AAAjB,CAAD,KAAgC;AACnD,QAAMC,MAAM,GAAGV,OAAO,CAACO,IAAD,CAAP,CAAcI,MAA7B;AACA,QAAMC,KAAK,GAAG,IAAIX,YAAJ,GACXY,MADW,CACH,GAAEJ,OAAO,CAACK,OAAQ,QADf,EAEXC,oBAFW,CAEU,IAFV,CAAd;AAIA,sBACE;AAAA,2BACE,QAAC,MAAD;AACE,MAAA,IAAI,EAAER,IADR;AAEE,MAAA,YAAY,EAAEK,KAFhB;AAGE,MAAA,OAAO,EAAEJ,OAHX;AAIE,MAAA,MAAM,EAAEQ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBf,MAAlB,EAA0B;AAChCgB,QAAAA,OAAO,EAAET,OAAO,CAACK;AADe,OAA1B,CAJV;AAOE,MAAA,SAAS,EAAEX;AAPb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAnBD;;AAqBAG,YAAY,CAACa,SAAb,GAAyB;AACvBZ,EAAAA,IAAI,EAAER,SAAS,CAACqB,MAAV,CAAiBC,UADA;AAEvBb,EAAAA,OAAO,EAAET,SAAS,CAACqB,MAAV,CAAiBC,UAFH;AAGvBZ,EAAAA,OAAO,EAAEJ;AAHc,CAAzB;;AAMA,MAAMiB,eAAe,GAAIC,KAAD,KAAY;AAClCd,EAAAA,OAAO,EAAEc,KAAK,CAACd;AADmB,CAAZ,CAAxB;;AAIA,eAAeL,OAAO,CAACkB,eAAD,CAAP,CAAyBhB,YAAzB,CAAf","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport widgets from \"../../../config/widgets\";\r\nimport FetchBuilder from \"../../../lib/fetch\";\r\nimport * as config from \"../../../config/constants\";\r\nimport * as utilities from \"../../../lib/utils\";\r\nimport { connect } from \"react-redux\";\r\nimport { addressProps } from \"../../../types\";\r\n\r\nconst WidgetByName = ({ name, section, address }) => {\r\n  const Widget = widgets[name].widget;\r\n  const fetch = new FetchBuilder()\r\n    .setUrl(`${address.backend}/graph`)\r\n    .setIsGraphQLEndpoint(true);\r\n\r\n  return (\r\n    <div>\r\n      <Widget\r\n        name={name}\r\n        fetchBuilder={fetch}\r\n        section={section}\r\n        config={Object.assign({}, config, {\r\n          BACKEND: address.backend,\r\n        })}\r\n        utilities={utilities}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nWidgetByName.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  section: PropTypes.string.isRequired,\r\n  address: addressProps,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  address: state.address,\r\n});\r\n\r\nexport default connect(mapStateToProps)(WidgetByName);\r\n"]},"metadata":{},"sourceType":"module"}