{"ast":null,"code":"import fetch from \"isomorphic-unfetch\";\nimport { URL_EXTENTION_POSTS, URL_EXTENTION_COURSES } from \"../config/constants.js\";\nimport { RichText as TextEditor } from \"@courselit/components-library\";\nexport const queryGraphQL = async (url, query, token) => {\n  const options = {\n    method: \"POST\",\n    headers: token ? {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    } : {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      query\n    })\n  };\n  let response = await fetch(url, options);\n  response = await response.json();\n\n  if (response.errors && response.errors.length > 0) {\n    throw new Error(response.errors[0].message);\n  }\n\n  return response.data;\n};\nexport const capitalize = s => s.charAt(0).toUpperCase() + s.slice(1);\nexport const queryGraphQLWithUIEffects = (backend, dispatch, networkAction, token) => async query => {\n  try {\n    dispatch(networkAction(false));\n    const response = await queryGraphQL(`${backend}/graph`, query, token);\n    return response;\n  } finally {\n    dispatch(networkAction(false));\n  }\n};\nexport const formattedLocaleDate = epochString => new Date(Number(epochString)).toLocaleString(\"en-US\", {\n  year: \"numeric\",\n  month: \"long\",\n  day: \"numeric\"\n}); // Regex copied from: https://stackoverflow.com/a/48675160/942589\n\nexport const makeGraphQLQueryStringFromJSObject = obj => JSON.stringify(obj).replace(/\"([^(\")\"]+)\":/g, \"$1:\");\nexport const formulateMediaUrl = (backend, mediaID, generateThumbnailUrl = false) => mediaID ? `${backend}/media/${mediaID}${generateThumbnailUrl ? \"?thumb=1\" : \"\"}` : \"\";\nexport const formulateCourseUrl = (course, backend = \"\") => `${backend}/${course.isBlog ? URL_EXTENTION_POSTS : URL_EXTENTION_COURSES}/${course.courseId}/${course.slug}`;\nexport const getPostDescriptionSnippet = rawDraftJSContentState => {\n  const firstSentence = TextEditor.hydrate({\n    data: rawDraftJSContentState\n  }).getCurrentContent().getPlainText().split(\".\")[0];\n  return firstSentence ? firstSentence + \".\" : firstSentence;\n};\nexport const getGraphQLQueryFields = (jsObj, fieldsNotPutBetweenQuotes = []) => {\n  let queryString = \"{\";\n\n  for (const i of Object.keys(jsObj)) {\n    if (jsObj[i] !== undefined) {\n      queryString += fieldsNotPutBetweenQuotes.includes(i) ? `${i}: ${jsObj[i]},` : `${i}: \"${jsObj[i]}\",`;\n    }\n  }\n\n  queryString += \"}\";\n  return queryString;\n};\nexport const getObjectContainingOnlyChangedFields = (baseline, obj) => {\n  const result = {};\n\n  for (const i of Object.keys(baseline)) {\n    if (baseline[i] !== obj[i]) {\n      result[i] = obj[i];\n    }\n  }\n\n  return result;\n};\nexport const areObjectsDifferent = (baseline, obj) => {\n  const onlyChangedFields = getObjectContainingOnlyChangedFields(baseline, obj);\n  return !!Object.keys(onlyChangedFields).length;\n};\nexport const getAddress = host => {\n  return {\n    domain: extractDomainFromURL(host),\n    backend: getBackendAddress(host),\n    frontend: `http://${host}`\n  };\n};\nexport const getBackendAddress = host => {\n  const domain = extractDomainFromURL(host);\n\n  if (false) {\n    return `${process.env.INSECURE === \"true\" ? \"http\" : \"https\"}://${domain}/api`;\n  } else {\n    return `http://${domain}:8000`;\n  }\n};\n\nconst extractDomainFromURL = host => {\n  return host.split(\":\")[0];\n};","map":null,"metadata":{},"sourceType":"module"}