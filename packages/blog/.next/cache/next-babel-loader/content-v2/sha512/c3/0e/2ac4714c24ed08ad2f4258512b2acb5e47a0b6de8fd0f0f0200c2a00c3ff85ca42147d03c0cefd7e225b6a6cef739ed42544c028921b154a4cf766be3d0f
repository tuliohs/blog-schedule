{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport React from \"react\";\n\n//import { connect } from \"react-redux\";\nclass CodeInjector extends React.Component {\n  componentDidMount() {\n    const targetTagsForInjection = [\"head\"];\n\n    for (const target of targetTagsForInjection) {\n      this.injectCodeIn(target);\n    }\n  }\n\n  injectCodeIn(targetHTMLTag) {\n    const tempContainer = document.createElement(\"div\"); //tempContainer.innerHTML = this.props.codeForHead;\n\n    const children = tempContainer.children;\n\n    for (let i = 0; i < children.length; i++) {\n      let elem = children[i];\n\n      if (elem.nodeName === \"SCRIPT\") {\n        const script = document.createElement(\"script\");\n        script.innerHTML = elem.innerHTML;\n        this.copyAttributes(elem, script);\n        elem = script;\n      }\n\n      document[targetHTMLTag].appendChild(elem);\n    }\n  }\n\n  copyAttributes(source, target) {\n    let attr;\n    const attributes = Array.prototype.slice.call(source.attributes);\n\n    while (attr = attributes.pop()) {\n      target.setAttribute(attr.nodeName, attr.nodeValue);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsx(_Fragment, {});\n  }\n\n} //CodeInjector.propTypes = {\n//  codeForHead: PropTypes.string,\n//};\n//const mapStateToProps = (state) => ({  codeForHead: state.siteinfo.codeInjectionHead,});\n//export default connect(mapStateToProps)(CodeInjector);\n\n\nexport default CodeInjector;","map":null,"metadata":{},"sourceType":"module"}