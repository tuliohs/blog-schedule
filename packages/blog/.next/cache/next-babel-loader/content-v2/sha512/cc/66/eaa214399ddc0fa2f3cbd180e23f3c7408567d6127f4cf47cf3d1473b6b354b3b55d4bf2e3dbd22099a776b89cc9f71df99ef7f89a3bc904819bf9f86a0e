{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\"; //import PropTypes from \"prop-types\";\n//import { connect } from \"react-redux\";\n//import { networkAction } from \"../../../redux/actions\";\n\nimport FetchBuilder from \"../../../lib/fetch\";\nimport { Grid, Button } from \"@material-ui/core\";\nimport { BTN_LOAD_MORE } from \"../../../config/strings\";\nimport Post from \"./Post\"; //import { addressProps, publicCourse } from \"../../../types\";\n\nimport Course from \"./Course\";\nimport { makeStyles } from \"@material-ui/styles\";\nconst useStyles = makeStyles(theme => ({\n  loadMoreBtn: {\n    [theme.breakpoints.up(\"md\")]: {\n      marginLeft: theme.spacing(2)\n    }\n  }\n}));\n\nconst List = props => {\n  const {\n    0: courses,\n    1: setCourses\n  } = useState(props.initialItems || []);\n  const {\n    0: offset,\n    1: setOffset\n  } = useState(2);\n  const {\n    0: shouldShowLoadMoreButton,\n    1: setShouldShowLoadMoreButton\n  } = useState(typeof props.showLoadMoreButton === \"boolean\" ? props.showLoadMoreButton : false);\n  const {\n    generateQuery\n  } = props;\n  const posts = typeof props.posts === \"boolean\" ? props.posts : false;\n  const classes = useStyles();\n  useEffect(() => {\n    getPosts();\n  }, [offset]);\n\n  const getPosts = async () => {\n    try {\n      var _props$address;\n\n      //verify what is it\n      //props.dispatch && props.dispatch(networkAction(true));\n      const fetch = new FetchBuilder().setUrl(`${props === null || props === void 0 ? void 0 : (_props$address = props.address) === null || _props$address === void 0 ? void 0 : _props$address.backend}/graph` || 'localhost:8080').setPayload(generateQuery(offset)).setIsGraphQLEndpoint(true).build();\n      const response = await fetch.exec();\n\n      if (response.courses) {\n        if (response.courses.length > 0) {\n          setCourses([...courses, ...response.courses]);\n        } else {\n          setShouldShowLoadMoreButton(false);\n        }\n      }\n    } finally {\n      props.dispatch && props.dispatch(networkAction(false));\n    }\n  };\n\n  return courses.length > 0 ? /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Grid, {\n      item: true,\n      container: true,\n      xs: 12,\n      justify: \"space-between\",\n      children: courses.map((x, index) => posts ? /*#__PURE__*/_jsx(Post, _objectSpread({}, x), index) : /*#__PURE__*/_jsx(Course, _objectSpread({}, x), index))\n    }), shouldShowLoadMoreButton && courses.length > 0 && /*#__PURE__*/_jsx(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsx(Button, {\n        variant: \"contained\",\n        disableElevation: true,\n        onClick: () => setOffset(offset + 1),\n        className: classes.loadMoreBtn,\n        children: BTN_LOAD_MORE\n      })\n    })]\n  }) : /*#__PURE__*/_jsx(_Fragment, {});\n}; //List.propTypes = {\n//  generateQuery: PropTypes.func.isRequired,\n//  initialItems: PropTypes.arrayOf(publicCourse),\n//  showLoadMoreButton: PropTypes.bool,\n//  dispatch: PropTypes.func.isRequired,\n//  posts: PropTypes.bool,\n//  address: addressProps,\n//};\n//const mapStateToProps = (state) => ({address: state.address,})\n//const mapDispatchToProps = (dispatch) => ({  dispatch: dispatch,});\n//export default connect(mapStateToProps, mapDispatchToProps)(List);\n\n\nexport default List;","map":null,"metadata":{},"sourceType":"module"}