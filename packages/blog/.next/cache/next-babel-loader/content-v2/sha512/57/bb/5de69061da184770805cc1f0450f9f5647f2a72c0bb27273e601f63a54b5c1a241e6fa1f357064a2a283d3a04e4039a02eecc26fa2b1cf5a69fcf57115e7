{"ast":null,"code":"import fetch from \"isomorphic-unfetch\";\nimport { URL_EXTENTION_POSTS, URL_EXTENTION_COURSES } from \"../config/constants.js\";\nimport { RichText as TextEditor } from \"@courselit/components-library\";\nexport const queryGraphQL = async (url, query, token) => {\n  const options = {\n    method: \"POST\",\n    headers: token ? {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    } : {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      query\n    })\n  };\n  let response = await fetch(url, options);\n  response = await response.json();\n\n  if (response.errors && response.errors.length > 0) {\n    throw new Error(response.errors[0].message);\n  }\n\n  return response.data;\n};\nexport const capitalize = s => s.charAt(0).toUpperCase() + s.slice(1);\nexport const queryGraphQLWithUIEffects = (backend, dispatch, networkAction, token) => async query => {\n  try {\n    dispatch(networkAction(false));\n    const response = await queryGraphQL(`${backend}/graph`, query, token);\n    return response;\n  } finally {\n    dispatch(networkAction(false));\n  }\n};\nexport const formattedLocaleDate = epochString => new Date(Number(epochString)).toLocaleString(\"en-US\", {\n  year: \"numeric\",\n  month: \"long\",\n  day: \"numeric\"\n}); // Regex copied from: https://stackoverflow.com/a/48675160/942589\n\nexport const makeGraphQLQueryStringFromJSObject = obj => JSON.stringify(obj).replace(/\"([^(\")\"]+)\":/g, \"$1:\");\nexport const formulateMediaUrl = (backend, mediaID, generateThumbnailUrl = false) => mediaID ? `${backend}/media/${mediaID}${generateThumbnailUrl ? \"?thumb=1\" : \"\"}` : \"\";\nexport const formulateCourseUrl = (course, backend = \"\") => `${backend}/${course.isBlog ? URL_EXTENTION_POSTS : URL_EXTENTION_COURSES}/${course.courseId}/${course.slug}`;\nexport const getPostDescriptionSnippet = rawDraftJSContentState => {\n  const firstSentence = TextEditor.hydrate({\n    data: rawDraftJSContentState\n  }).getCurrentContent().getPlainText().split(\".\")[0];\n  return firstSentence ? firstSentence + \".\" : firstSentence;\n};\nexport const getGraphQLQueryFields = (jsObj, fieldsNotPutBetweenQuotes = []) => {\n  let queryString = \"{\";\n\n  for (const i of Object.keys(jsObj)) {\n    if (jsObj[i] !== undefined) {\n      queryString += fieldsNotPutBetweenQuotes.includes(i) ? `${i}: ${jsObj[i]},` : `${i}: \"${jsObj[i]}\",`;\n    }\n  }\n\n  queryString += \"}\";\n  return queryString;\n};\nexport const getObjectContainingOnlyChangedFields = (baseline, obj) => {\n  const result = {};\n\n  for (const i of Object.keys(baseline)) {\n    if (baseline[i] !== obj[i]) {\n      result[i] = obj[i];\n    }\n  }\n\n  return result;\n};\nexport const areObjectsDifferent = (baseline, obj) => {\n  const onlyChangedFields = getObjectContainingOnlyChangedFields(baseline, obj);\n  return !!Object.keys(onlyChangedFields).length;\n};\nexport const getAddress = host => {\n  return {\n    domain: extractDomainFromURL(host),\n    backend: getBackendAddress(host),\n    frontend: `http://${host}`\n  };\n};\nexport const getBackendAddress = host => {\n  const domain = extractDomainFromURL(host);\n\n  if (false) {\n    return `${process.env.INSECURE === \"true\" ? \"http\" : \"https\"}://${domain}/api`;\n  } else {\n    return `http://${domain}:8000`;\n  }\n};\n\nconst extractDomainFromURL = host => {\n  return host.split(\":\")[0];\n};","map":{"version":3,"sources":["C:/Users/MGS/Sistemas/temp/courselit/packages/blog/lib/utils.js"],"names":["fetch","URL_EXTENTION_POSTS","URL_EXTENTION_COURSES","RichText","TextEditor","queryGraphQL","url","query","token","options","method","headers","Authorization","body","JSON","stringify","response","json","errors","length","Error","message","data","capitalize","s","charAt","toUpperCase","slice","queryGraphQLWithUIEffects","backend","dispatch","networkAction","formattedLocaleDate","epochString","Date","Number","toLocaleString","year","month","day","makeGraphQLQueryStringFromJSObject","obj","replace","formulateMediaUrl","mediaID","generateThumbnailUrl","formulateCourseUrl","course","isBlog","courseId","slug","getPostDescriptionSnippet","rawDraftJSContentState","firstSentence","hydrate","getCurrentContent","getPlainText","split","getGraphQLQueryFields","jsObj","fieldsNotPutBetweenQuotes","queryString","i","Object","keys","undefined","includes","getObjectContainingOnlyChangedFields","baseline","result","areObjectsDifferent","onlyChangedFields","getAddress","host","domain","extractDomainFromURL","getBackendAddress","frontend","process","env","INSECURE"],"mappings":"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","sourcesContent":["import fetch from \"isomorphic-unfetch\";\r\nimport {\r\n  URL_EXTENTION_POSTS,\r\n  URL_EXTENTION_COURSES,\r\n} from \"../config/constants.js\";\r\nimport { RichText as TextEditor } from \"@courselit/components-library\";\r\n\r\nexport const queryGraphQL = async (url, query, token) => {\r\n  const options = {\r\n    method: \"POST\",\r\n    headers: token\r\n      ? {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      }\r\n      : { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ query }),\r\n  };\r\n  let response = await fetch(url, options);\r\n  response = await response.json();\r\n\r\n  if (response.errors && response.errors.length > 0) {\r\n    throw new Error(response.errors[0].message);\r\n  }\r\n\r\n  return response.data;\r\n};\r\n\r\nexport const capitalize = (s) => s.charAt(0).toUpperCase() + s.slice(1);\r\n\r\nexport const queryGraphQLWithUIEffects = (\r\n  backend,\r\n  dispatch,\r\n  networkAction,\r\n  token\r\n) => async (query) => {\r\n  try {\r\n    dispatch(networkAction(false));\r\n    const response = await queryGraphQL(`${backend}/graph`, query, token);\r\n\r\n    return response;\r\n  } finally {\r\n    dispatch(networkAction(false));\r\n  }\r\n};\r\n\r\nexport const formattedLocaleDate = (epochString) =>\r\n  new Date(Number(epochString)).toLocaleString(\"en-US\", {\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  });\r\n\r\n// Regex copied from: https://stackoverflow.com/a/48675160/942589\r\nexport const makeGraphQLQueryStringFromJSObject = (obj) =>\r\n  JSON.stringify(obj).replace(/\"([^(\")\"]+)\":/g, \"$1:\");\r\n\r\nexport const formulateMediaUrl = (\r\n  backend,\r\n  mediaID,\r\n  generateThumbnailUrl = false\r\n) =>\r\n  mediaID\r\n    ? `${backend}/media/${mediaID}${generateThumbnailUrl ? \"?thumb=1\" : \"\"}`\r\n    : \"\";\r\n\r\nexport const formulateCourseUrl = (course, backend = \"\") =>\r\n  `${backend}/${course.isBlog ? URL_EXTENTION_POSTS : URL_EXTENTION_COURSES}/${course.courseId\r\n  }/${course.slug}`;\r\n\r\nexport const getPostDescriptionSnippet = (rawDraftJSContentState) => {\r\n  const firstSentence = TextEditor.hydrate({ data: rawDraftJSContentState })\r\n    .getCurrentContent()\r\n    .getPlainText()\r\n    .split(\".\")[0];\r\n\r\n  return firstSentence ? firstSentence + \".\" : firstSentence;\r\n};\r\n\r\nexport const getGraphQLQueryFields = (\r\n  jsObj,\r\n  fieldsNotPutBetweenQuotes = []\r\n) => {\r\n  let queryString = \"{\";\r\n  for (const i of Object.keys(jsObj)) {\r\n    if (jsObj[i] !== undefined) {\r\n      queryString += fieldsNotPutBetweenQuotes.includes(i)\r\n        ? `${i}: ${jsObj[i]},`\r\n        : `${i}: \"${jsObj[i]}\",`;\r\n    }\r\n  }\r\n  queryString += \"}\";\r\n\r\n  return queryString;\r\n};\r\n\r\nexport const getObjectContainingOnlyChangedFields = (baseline, obj) => {\r\n  const result = {};\r\n  for (const i of Object.keys(baseline)) {\r\n    if (baseline[i] !== obj[i]) {\r\n      result[i] = obj[i];\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\nexport const areObjectsDifferent = (baseline, obj) => {\r\n  const onlyChangedFields = getObjectContainingOnlyChangedFields(baseline, obj);\r\n  return !!Object.keys(onlyChangedFields).length;\r\n};\r\n\r\nexport const getAddress = (host) => {\r\n  return {\r\n    domain: extractDomainFromURL(host),\r\n    backend: getBackendAddress(host),\r\n    frontend: `http://${host}`,\r\n  };\r\n};\r\n\r\nexport const getBackendAddress = (host) => {\r\n  const domain = extractDomainFromURL(host);\r\n\r\n  if (process.env.NODE_ENV === \"not_word_in_production\") {\r\n    return `${process.env.INSECURE === \"true\" ? \"http\" : \"https\"\r\n      }://${domain}/api`;\r\n  } else {\r\n    return `http://${domain}:8000`;\r\n  }\r\n};\r\n\r\nconst extractDomainFromURL = (host) => {\r\n  return host.split(\":\")[0];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}