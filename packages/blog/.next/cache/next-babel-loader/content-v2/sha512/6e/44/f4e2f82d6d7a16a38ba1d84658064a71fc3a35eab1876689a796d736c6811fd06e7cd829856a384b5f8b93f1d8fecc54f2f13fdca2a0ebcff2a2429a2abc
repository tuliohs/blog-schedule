{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n//import { connect } from \"react-redux\";\nimport { formulateMediaUrl, formulateCourseUrl, getBackendAddress } from \"../../../lib/utils.js\";\nimport { makeStyles, Grid } from \"@material-ui/core\";\nimport Head from \"next/head\";\nimport FetchBuilder from \"../../../lib/fetch.js\"; //import { addressProps, siteInfoProps } from \"../../../types.js\";\n\nimport dynamic from \"next/dynamic\";\nconst BaseLayout = dynamic(() => import(\"../../../components/Public/BaseLayout\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../../../components/Public/BaseLayout\")],\n    modules: [\"../../../components/Public/BaseLayout\"]\n  }\n});\nconst Article = dynamic(() => import(\"../../../components/Public/Article.js\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../../../components/Public/Article.js\")],\n    modules: [\"../../../components/Public/Article.js\"]\n  }\n});\nconst useStyles = makeStyles(theme => ({\n  content: {\n    padding: theme.spacing(2),\n    marginBottom: theme.spacing(4)\n  }\n}));\n\nconst Post = props => {\n  var _props$post, _props$address, _props$address2;\n\n  const classes = useStyles();\n  const articleOptions = {\n    showAttribution: true\n  };\n  return /*#__PURE__*/_jsx(BaseLayout, {\n    title: (_props$post = props.post) === null || _props$post === void 0 ? void 0 : _props$post.title,\n    children: props.post && /*#__PURE__*/_jsxs(Grid, {\n      item: true,\n      xs: 12,\n      className: classes.content,\n      children: [/*#__PURE__*/_jsxs(Head, {\n        children: [/*#__PURE__*/_jsx(\"meta\", {\n          property: \"og:url\",\n          content: formulateCourseUrl(props.post, (props === null || props === void 0 ? void 0 : (_props$address = props.address) === null || _props$address === void 0 ? void 0 : _props$address.frontend) || 'localhost:8000')\n        }), /*#__PURE__*/_jsx(\"meta\", {\n          property: \"og:type\",\n          content: \"article\"\n        }), /*#__PURE__*/_jsx(\"meta\", {\n          property: \"og:title\",\n          content: props.post.title\n        }), /*#__PURE__*/_jsx(\"meta\", {\n          property: \"og:author\",\n          content: props.post.creatorName\n        }), props.post.featuredImage && /*#__PURE__*/_jsx(\"meta\", {\n          property: \"og:image\",\n          content: formulateMediaUrl((props === null || props === void 0 ? void 0 : (_props$address2 = props.address) === null || _props$address2 === void 0 ? void 0 : _props$address2.frontend) || 'localhost:8000', props.post.featuredImage)\n        })]\n      }), /*#__PURE__*/_jsx(Article, {\n        course: props.post,\n        options: articleOptions\n      })]\n    })\n  });\n};\n\nconst generateQuery = (pageOffset = 1) => `\n  query {\n    courses: getPosts(offset: ${pageOffset}) {\n      id,\n      title,\n      description,\n      updated,\n      creatorName,\n      slug,\n      featuredImage,\n      courseId\n    }\n  }\n`;\n\nconst getCourses = async (backend = 'http://localhost:8000') => {\n  console.log(backend, 'backendbackend');\n  let courses = [];\n\n  try {\n    const fetch = new FetchBuilder().setUrl(`${backend}/graph`).setPayload(generateQuery()).setIsGraphQLEndpoint(true).build();\n    const response = await fetch.exec();\n    courses = response.courses;\n  } catch (e) {}\n\n  return courses;\n};\n\nexport const getStaticPaths = async () => {\n  const post = await getCourses();\n  return {\n    paths: post === null || post === void 0 ? void 0 : post.map(data => ({\n      params: {\n        id: data === null || data === void 0 ? void 0 : data.courseId.toString(),\n        slug: data === null || data === void 0 ? void 0 : data.slug\n      }\n    })),\n    fallback: true //SE A PAGINA NÃO EXISTIR ENTÃO, GERAR NOVAMENTE\n\n  };\n};\nexport async function getStaticProps({\n  params\n}) {\n  const graphQuery = `\n    query {\n      post: getCourse(courseId: ${params.id}) {\n          id,\n          title,\n          description,\n          featuredImage,\n          updated,\n          creatorName,\n          creatorId,\n          slug,\n          isBlog,\n          courseId,\n      }\n    }\n  `;\n  const fetch = new FetchBuilder() //.setUrl(`${getBackendAddress(req?.headers.host)}/graph`)\n  .setUrl(`${'http://localhost:8000'}/graph`).setPayload(graphQuery).setIsGraphQLEndpoint(true).build();\n  let post = null;\n\n  try {\n    const response = await fetch.exec();\n    post = response.post;\n  } catch (err) {\n    post = {\n      title: err.message\n    };\n  }\n\n  return {\n    props: {\n      post\n    }\n  };\n} //export async function getServerSideProps({ query, req }) {\n//  //export async function getStaticProps({ params }) {\n//  console.log('queryquery', query)\n//  console.log(`${getBackendAddress(req?.headers.host)}/graph`, 'howtst')\n//  const graphQuery = `\n//      query {\n//        post: getCourse(courseId: ${query.id}) {\n//            id,\n//            title,\n//            description,\n//            featuredImage,\n//            updated,\n//            creatorName,\n//            creatorId,\n//            slug,\n//            isBlog,\n//            courseId,\n//        }\n//      }\n//    `;\n//  const fetch = new FetchBuilder()\n//    .setUrl(`${getBackendAddress(req?.headers.host)}/graph`)\n//    //.setUrl(`${'localhost:3002'}/graph`)\n//    .setPayload(graphQuery)\n//    .setIsGraphQLEndpoint(true)\n//    .build();\n//  let post = null;\n//  try {\n//    const response = await fetch.exec();\n//    post = response.post;\n//  } catch (err) {\n//    post = {\n//      title: err.message,\n//    };\n//  }\n//  return {\n//    props: {\n//      post,\n//    },\n//  };\n//}\n//Post.propTypes = {\n//  siteInfo: siteInfoProps,\n//  address: addressProps,\n//};\n//const mapStateToProps = (state) => ({siteInfo: state.siteinfo,address: state.address,});\n//export default connect(mapStateToProps)(Post);\n\nexport default Post;","map":null,"metadata":{},"sourceType":"module"}