{"ast":null,"code":"/**\r\n * A utility class to make network calls and intercept the response. It is\r\n * useful for cases like redirection to the login page if the server returned\r\n * a 401 etc.\r\n */\nimport fetch from \"isomorphic-unfetch\";\nimport Router from \"next/router\";\n\nconst Fetch = function (url, payload, token, isGraphQLEndpoint) {\n  this.url = url;\n  this.payload = payload;\n  this.token = token;\n  this.isGraphQLEndpoint = isGraphQLEndpoint;\n};\n\nFetch.prototype.exec = async function () {\n  const fetchOptions = {\n    method: \"POST\",\n    headers: {}\n  };\n\n  if (this.token) {\n    fetchOptions.headers.Authorization = `Bearer ${this.token}`;\n  }\n\n  if (this.isGraphQLEndpoint) {\n    fetchOptions.headers[\"Content-Type\"] = \"application/json\";\n    fetchOptions.body = JSON.stringify({\n      query: this.payload\n    });\n  } else {\n    fetchOptions.body = this.payload;\n  }\n\n  let response = await fetch(this.url, fetchOptions);\n\n  if (response.status === 401) {\n    Router.push(\"/logout\");\n    return {};\n  }\n\n  response = await response.json();\n\n  if (response.errors && response.errors.length > 0) {\n    throw new Error(response.errors[0].message);\n  }\n\n  return this.isGraphQLEndpoint ? response.data : response;\n};\n\nconst FetchBuilder = function () {\n  return {\n    setUrl: function (url) {\n      this.url = url;\n      return this;\n    },\n    setPayload: function (payload) {\n      this.payload = payload;\n      return this;\n    },\n    setAuthToken: function (token) {\n      this.token = token;\n      return this;\n    },\n    setIsGraphQLEndpoint: function (isGraphQLEndpoint) {\n      this.isGraphQLEndpoint = isGraphQLEndpoint;\n      return this;\n    },\n    build: function () {\n      return new Fetch(this.url, this.payload, this.token, this.isGraphQLEndpoint);\n    }\n  };\n};\n\nexport default FetchBuilder;","map":{"version":3,"sources":["C:/Users/MGS/Sistemas/temp/courselit/packages/blog/lib/fetch.js"],"names":["fetch","Router","Fetch","url","payload","token","isGraphQLEndpoint","prototype","exec","fetchOptions","method","headers","Authorization","body","JSON","stringify","query","response","status","push","json","errors","length","Error","message","data","FetchBuilder","setUrl","setPayload","setAuthToken","setIsGraphQLEndpoint","build"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,MAAMC,KAAK,GAAG,UAAUC,GAAV,EAAeC,OAAf,EAAwBC,KAAxB,EAA+BC,iBAA/B,EAAkD;AAC9D,OAAKH,GAAL,GAAWA,GAAX;AACA,OAAKC,OAAL,GAAeA,OAAf;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKC,iBAAL,GAAyBA,iBAAzB;AACD,CALD;;AAOAJ,KAAK,CAACK,SAAN,CAAgBC,IAAhB,GAAuB,kBAAkB;AACvC,QAAMC,YAAY,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AAFU,GAArB;;AAKA,MAAI,KAAKN,KAAT,EAAgB;AACdI,IAAAA,YAAY,CAACE,OAAb,CAAqBC,aAArB,GAAsC,UAAS,KAAKP,KAAM,EAA1D;AACD;;AAED,MAAI,KAAKC,iBAAT,EAA4B;AAC1BG,IAAAA,YAAY,CAACE,OAAb,CAAqB,cAArB,IAAuC,kBAAvC;AACAF,IAAAA,YAAY,CAACI,IAAb,GAAoBC,IAAI,CAACC,SAAL,CAAe;AAAEC,MAAAA,KAAK,EAAE,KAAKZ;AAAd,KAAf,CAApB;AACD,GAHD,MAGO;AACLK,IAAAA,YAAY,CAACI,IAAb,GAAoB,KAAKT,OAAzB;AACD;;AAED,MAAIa,QAAQ,GAAG,MAAMjB,KAAK,CAAC,KAAKG,GAAN,EAAWM,YAAX,CAA1B;;AAEA,MAAIQ,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BjB,IAAAA,MAAM,CAACkB,IAAP,CAAY,SAAZ;AACA,WAAO,EAAP;AACD;;AAEDF,EAAAA,QAAQ,GAAG,MAAMA,QAAQ,CAACG,IAAT,EAAjB;;AAEA,MAAIH,QAAQ,CAACI,MAAT,IAAmBJ,QAAQ,CAACI,MAAT,CAAgBC,MAAhB,GAAyB,CAAhD,EAAmD;AACjD,UAAM,IAAIC,KAAJ,CAAUN,QAAQ,CAACI,MAAT,CAAgB,CAAhB,EAAmBG,OAA7B,CAAN;AACD;;AAED,SAAO,KAAKlB,iBAAL,GAAyBW,QAAQ,CAACQ,IAAlC,GAAyCR,QAAhD;AACD,CA/BD;;AAiCA,MAAMS,YAAY,GAAG,YAAY;AAC/B,SAAO;AACLC,IAAAA,MAAM,EAAE,UAAUxB,GAAV,EAAe;AACrB,WAAKA,GAAL,GAAWA,GAAX;AACA,aAAO,IAAP;AACD,KAJI;AAKLyB,IAAAA,UAAU,EAAE,UAAUxB,OAAV,EAAmB;AAC7B,WAAKA,OAAL,GAAeA,OAAf;AACA,aAAO,IAAP;AACD,KARI;AASLyB,IAAAA,YAAY,EAAE,UAAUxB,KAAV,EAAiB;AAC7B,WAAKA,KAAL,GAAaA,KAAb;AACA,aAAO,IAAP;AACD,KAZI;AAaLyB,IAAAA,oBAAoB,EAAE,UAAUxB,iBAAV,EAA6B;AACjD,WAAKA,iBAAL,GAAyBA,iBAAzB;AACA,aAAO,IAAP;AACD,KAhBI;AAiBLyB,IAAAA,KAAK,EAAE,YAAY;AACjB,aAAO,IAAI7B,KAAJ,CACL,KAAKC,GADA,EAEL,KAAKC,OAFA,EAGL,KAAKC,KAHA,EAIL,KAAKC,iBAJA,CAAP;AAMD;AAxBI,GAAP;AA0BD,CA3BD;;AA6BA,eAAeoB,YAAf","sourcesContent":["/**\r\n * A utility class to make network calls and intercept the response. It is\r\n * useful for cases like redirection to the login page if the server returned\r\n * a 401 etc.\r\n */\r\n\r\nimport fetch from \"isomorphic-unfetch\";\r\nimport Router from \"next/router\";\r\n\r\nconst Fetch = function (url, payload, token, isGraphQLEndpoint) {\r\n  this.url = url;\r\n  this.payload = payload;\r\n  this.token = token;\r\n  this.isGraphQLEndpoint = isGraphQLEndpoint;\r\n};\r\n\r\nFetch.prototype.exec = async function () {\r\n  const fetchOptions = {\r\n    method: \"POST\",\r\n    headers: {},\r\n  };\r\n\r\n  if (this.token) {\r\n    fetchOptions.headers.Authorization = `Bearer ${this.token}`;\r\n  }\r\n\r\n  if (this.isGraphQLEndpoint) {\r\n    fetchOptions.headers[\"Content-Type\"] = \"application/json\";\r\n    fetchOptions.body = JSON.stringify({ query: this.payload });\r\n  } else {\r\n    fetchOptions.body = this.payload;\r\n  }\r\n\r\n  let response = await fetch(this.url, fetchOptions);\r\n\r\n  if (response.status === 401) {\r\n    Router.push(\"/logout\");\r\n    return {};\r\n  }\r\n\r\n  response = await response.json();\r\n\r\n  if (response.errors && response.errors.length > 0) {\r\n    throw new Error(response.errors[0].message);\r\n  }\r\n\r\n  return this.isGraphQLEndpoint ? response.data : response;\r\n};\r\n\r\nconst FetchBuilder = function () {\r\n  return {\r\n    setUrl: function (url) {\r\n      this.url = url;\r\n      return this;\r\n    },\r\n    setPayload: function (payload) {\r\n      this.payload = payload;\r\n      return this;\r\n    },\r\n    setAuthToken: function (token) {\r\n      this.token = token;\r\n      return this;\r\n    },\r\n    setIsGraphQLEndpoint: function (isGraphQLEndpoint) {\r\n      this.isGraphQLEndpoint = isGraphQLEndpoint;\r\n      return this;\r\n    },\r\n    build: function () {\r\n      return new Fetch(\r\n        this.url,\r\n        this.payload,\r\n        this.token,\r\n        this.isGraphQLEndpoint\r\n      );\r\n    },\r\n  };\r\n};\r\n\r\nexport default FetchBuilder;\r\n"]},"metadata":{},"sourceType":"module"}