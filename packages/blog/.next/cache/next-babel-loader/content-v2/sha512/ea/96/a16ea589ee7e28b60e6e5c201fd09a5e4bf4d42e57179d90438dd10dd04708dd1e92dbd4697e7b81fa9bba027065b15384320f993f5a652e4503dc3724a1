{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { addressProps, authProps, publicCourse, siteInfoProps } from \"../../types\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { ENROLL_BUTTON_TEXT } from \"../../config/strings\";\nimport { connect } from \"react-redux\";\nimport { useRouter } from \"next/router\";\nimport fetch from \"isomorphic-unfetch\";\n\nconst Stripe = props => {\n  const {\n    course,\n    siteInfo,\n    auth,\n    address\n  } = props;\n  const stripePromise = loadStripe(siteInfo.stripePublishableKey);\n  const router = useRouter();\n\n  const handleClick = async () => {\n    let initiatePaymentResponse = await makePaymentRequest({\n      courseId: course.id,\n      backend: address.backend,\n      token: auth.token,\n      frontend: address.frontend,\n      router\n    });\n\n    if (initiatePaymentResponse.status === 401) {\n      router.push(`/login?redirect=${router.asPath}`);\n      return;\n    }\n\n    try {\n      initiatePaymentResponse = await initiatePaymentResponse.json();\n      await redirectToStripeCheckout({\n        stripe: await stripePromise,\n        sessionId: initiatePaymentResponse.paymentTracker\n      });\n    } catch (err) {}\n  };\n\n  const makePaymentRequest = async ({\n    courseId,\n    backend,\n    token,\n    router,\n    frontend\n  }) => {\n    const formData = new window.FormData();\n    formData.append(\"courseid\", courseId);\n    formData.append(\"metadata\", JSON.stringify({\n      cancelUrl: `${frontend}${router.asPath}`,\n      successUrl: `${frontend}/purchase`,\n      sourceUrl: router.asPath\n    }));\n    const res = await fetch(`${backend}/payment/initiate`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      body: formData\n    });\n    return res;\n  };\n\n  const redirectToStripeCheckout = async ({\n    stripe,\n    sessionId\n  }) => {\n    const result = await stripe.redirectToCheckout({\n      sessionId\n    });\n\n    if (result.error) {// console.log(result.error);\n    }\n  };\n\n  return /*#__PURE__*/_jsx(Button, {\n    onClick: handleClick,\n    variant: \"contained\",\n    color: \"primary\",\n    children: ENROLL_BUTTON_TEXT\n  });\n};\n\nconst mapStateToProps = state => ({\n  siteInfo: state.siteinfo,\n  auth: state.auth,\n  address: state.address\n});\n\nexport default connect(mapStateToProps)(Stripe);","map":null,"metadata":{},"sourceType":"module"}