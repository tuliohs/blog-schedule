{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\"; //import { connect } from \"react-redux\";\n\nclass CodeInjector extends React.Component {\n  componentDidMount() {\n    const targetTagsForInjection = [\"head\"];\n\n    for (const target of targetTagsForInjection) {\n      this.injectCodeIn(target);\n    }\n  }\n\n  injectCodeIn(targetHTMLTag) {\n    const tempContainer = document.createElement(\"div\"); //tempContainer.innerHTML = this.props.codeForHead;\n\n    const children = tempContainer.children;\n\n    for (let i = 0; i < children.length; i++) {\n      let elem = children[i];\n\n      if (elem.nodeName === \"SCRIPT\") {\n        const script = document.createElement(\"script\");\n        script.innerHTML = elem.innerHTML;\n        this.copyAttributes(elem, script);\n        elem = script;\n      }\n\n      document[targetHTMLTag].appendChild(elem);\n    }\n  }\n\n  copyAttributes(source, target) {\n    let attr;\n    const attributes = Array.prototype.slice.call(source.attributes);\n\n    while (attr = attributes.pop()) {\n      target.setAttribute(attr.nodeName, attr.nodeValue);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n\n} //CodeInjector.propTypes = {\n//  codeForHead: PropTypes.string,\n//};\n//const mapStateToProps = (state) => ({  codeForHead: state.siteinfo.codeInjectionHead,});\n//export default connect(mapStateToProps)(CodeInjector);\n\n\nexport default CodeInjector;","map":{"version":3,"sources":["C:/Users/MGS/Sistemas/temp/courselit/packages/blog/components/Public/CodeInjector.js"],"names":["React","PropTypes","CodeInjector","Component","componentDidMount","targetTagsForInjection","target","injectCodeIn","targetHTMLTag","tempContainer","document","createElement","children","i","length","elem","nodeName","script","innerHTML","copyAttributes","appendChild","source","attr","attributes","Array","prototype","slice","call","pop","setAttribute","nodeValue","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CACA;;AACA,MAAMC,YAAN,SAA2BF,KAAK,CAACG,SAAjC,CAA2C;AACzCC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,sBAAsB,GAAG,CAAC,MAAD,CAA/B;;AACA,SAAK,MAAMC,MAAX,IAAqBD,sBAArB,EAA6C;AAC3C,WAAKE,YAAL,CAAkBD,MAAlB;AACD;AACF;;AAEDC,EAAAA,YAAY,CAACC,aAAD,EAAgB;AAC1B,UAAMC,aAAa,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAtB,CAD0B,CAE1B;;AACA,UAAMC,QAAQ,GAAGH,aAAa,CAACG,QAA/B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAAQ,CAACE,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,UAAIE,IAAI,GAAGH,QAAQ,CAACC,CAAD,CAAnB;;AACA,UAAIE,IAAI,CAACC,QAAL,KAAkB,QAAtB,EAAgC;AAC9B,cAAMC,MAAM,GAAGP,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAM,QAAAA,MAAM,CAACC,SAAP,GAAmBH,IAAI,CAACG,SAAxB;AACA,aAAKC,cAAL,CAAoBJ,IAApB,EAA0BE,MAA1B;AACAF,QAAAA,IAAI,GAAGE,MAAP;AACD;;AACDP,MAAAA,QAAQ,CAACF,aAAD,CAAR,CAAwBY,WAAxB,CAAoCL,IAApC;AACD;AACF;;AAEDI,EAAAA,cAAc,CAACE,MAAD,EAASf,MAAT,EAAiB;AAC7B,QAAIgB,IAAJ;AACA,UAAMC,UAAU,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BN,MAAM,CAACE,UAAlC,CAAnB;;AACA,WAAQD,IAAI,GAAGC,UAAU,CAACK,GAAX,EAAf,EAAkC;AAChCtB,MAAAA,MAAM,CAACuB,YAAP,CAAoBP,IAAI,CAACN,QAAzB,EAAmCM,IAAI,CAACQ,SAAxC;AACD;AACF;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBAAO,qCAAP;AACD;;AAlCwC,C,CAqC3C;AACA;AACA;AAEA;AACA;;;AACA,eAAe7B,YAAf","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n//import { connect } from \"react-redux\";\r\nclass CodeInjector extends React.Component {\r\n  componentDidMount() {\r\n    const targetTagsForInjection = [\"head\"];\r\n    for (const target of targetTagsForInjection) {\r\n      this.injectCodeIn(target);\r\n    }\r\n  }\r\n\r\n  injectCodeIn(targetHTMLTag) {\r\n    const tempContainer = document.createElement(\"div\");\r\n    //tempContainer.innerHTML = this.props.codeForHead;\r\n    const children = tempContainer.children;\r\n    for (let i = 0; i < children.length; i++) {\r\n      let elem = children[i];\r\n      if (elem.nodeName === \"SCRIPT\") {\r\n        const script = document.createElement(\"script\");\r\n        script.innerHTML = elem.innerHTML;\r\n        this.copyAttributes(elem, script);\r\n        elem = script;\r\n      }\r\n      document[targetHTMLTag].appendChild(elem);\r\n    }\r\n  }\r\n\r\n  copyAttributes(source, target) {\r\n    let attr;\r\n    const attributes = Array.prototype.slice.call(source.attributes);\r\n    while ((attr = attributes.pop())) {\r\n      target.setAttribute(attr.nodeName, attr.nodeValue);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <></>;\r\n  }\r\n}\r\n\r\n//CodeInjector.propTypes = {\r\n//  codeForHead: PropTypes.string,\r\n//};\r\n\r\n//const mapStateToProps = (state) => ({  codeForHead: state.siteinfo.codeInjectionHead,});\r\n//export default connect(mapStateToProps)(CodeInjector);\r\nexport default CodeInjector\r\n"]},"metadata":{},"sourceType":"module"}