{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\MGS\\\\Sistemas\\\\temp\\\\courselit\\\\packages\\\\blog\\\\components\\\\CheckoutExternal\\\\Stripe.js\";\nimport React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { addressProps, authProps, publicCourse, siteInfoProps } from \"../../types\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { ENROLL_BUTTON_TEXT } from \"../../config/strings\";\nimport { connect } from \"react-redux\";\nimport { useRouter } from \"next/router\";\nimport fetch from \"isomorphic-unfetch\";\n\nconst Stripe = props => {\n  const {\n    course,\n    siteInfo,\n    auth,\n    address\n  } = props;\n  const stripePromise = loadStripe(siteInfo.stripePublishableKey);\n  const router = useRouter();\n\n  const handleClick = async () => {\n    let initiatePaymentResponse = await makePaymentRequest({\n      courseId: course.id,\n      backend: address.backend,\n      token: auth.token,\n      frontend: address.frontend,\n      router\n    });\n\n    if (initiatePaymentResponse.status === 401) {\n      router.push(`/login?redirect=${router.asPath}`);\n      return;\n    }\n\n    try {\n      initiatePaymentResponse = await initiatePaymentResponse.json();\n      await redirectToStripeCheckout({\n        stripe: await stripePromise,\n        sessionId: initiatePaymentResponse.paymentTracker\n      });\n    } catch (err) {}\n  };\n\n  const makePaymentRequest = async ({\n    courseId,\n    backend,\n    token,\n    router,\n    frontend\n  }) => {\n    const formData = new window.FormData();\n    formData.append(\"courseid\", courseId);\n    formData.append(\"metadata\", JSON.stringify({\n      cancelUrl: `${frontend}${router.asPath}`,\n      successUrl: `${frontend}/purchase`,\n      sourceUrl: router.asPath\n    }));\n    const res = await fetch(`${backend}/payment/initiate`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      body: formData\n    });\n    return res;\n  };\n\n  const redirectToStripeCheckout = async ({\n    stripe,\n    sessionId\n  }) => {\n    const result = await stripe.redirectToCheckout({\n      sessionId\n    });\n\n    if (result.error) {// console.log(result.error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: handleClick,\n    variant: \"contained\",\n    color: \"primary\",\n    children: ENROLL_BUTTON_TEXT\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\nStripe.propTypes = {\n  course: publicCourse.isRequired,\n  siteInfo: siteInfoProps,\n  auth: authProps,\n  address: addressProps\n};\n\nconst mapStateToProps = state => ({\n  siteInfo: state.siteinfo,\n  auth: state.auth,\n  address: state.address\n});\n\nexport default connect(mapStateToProps)(Stripe);","map":{"version":3,"sources":["C:/Users/MGS/Sistemas/temp/courselit/packages/blog/components/CheckoutExternal/Stripe.js"],"names":["React","Button","addressProps","authProps","publicCourse","siteInfoProps","loadStripe","ENROLL_BUTTON_TEXT","connect","useRouter","fetch","Stripe","props","course","siteInfo","auth","address","stripePromise","stripePublishableKey","router","handleClick","initiatePaymentResponse","makePaymentRequest","courseId","id","backend","token","frontend","status","push","asPath","json","redirectToStripeCheckout","stripe","sessionId","paymentTracker","err","formData","window","FormData","append","JSON","stringify","cancelUrl","successUrl","sourceUrl","res","method","headers","Authorization","body","result","redirectToCheckout","error","propTypes","isRequired","mapStateToProps","state","siteinfo"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport {\r\n  addressProps,\r\n  authProps,\r\n  publicCourse,\r\n  siteInfoProps,\r\n} from \"../../types\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { ENROLL_BUTTON_TEXT } from \"../../config/strings\";\r\nimport { connect } from \"react-redux\";\r\nimport { useRouter } from \"next/router\";\r\nimport fetch from \"isomorphic-unfetch\";\r\n\r\nconst Stripe = (props) => {\r\n  const { course, siteInfo, auth, address } = props;\r\n  const stripePromise = loadStripe(siteInfo.stripePublishableKey);\r\n  const router = useRouter();\r\n\r\n  const handleClick = async () => {\r\n    let initiatePaymentResponse = await makePaymentRequest({\r\n      courseId: course.id,\r\n      backend: address.backend,\r\n      token: auth.token,\r\n      frontend: address.frontend,\r\n      router,\r\n    });\r\n\r\n    if (initiatePaymentResponse.status === 401) {\r\n      router.push(`/login?redirect=${router.asPath}`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      initiatePaymentResponse = await initiatePaymentResponse.json();\r\n      await redirectToStripeCheckout({\r\n        stripe: await stripePromise,\r\n        sessionId: initiatePaymentResponse.paymentTracker,\r\n      });\r\n    } catch (err) {}\r\n  };\r\n\r\n  const makePaymentRequest = async ({\r\n    courseId,\r\n    backend,\r\n    token,\r\n    router,\r\n    frontend,\r\n  }) => {\r\n    const formData = new window.FormData();\r\n    formData.append(\"courseid\", courseId);\r\n    formData.append(\r\n      \"metadata\",\r\n      JSON.stringify({\r\n        cancelUrl: `${frontend}${router.asPath}`,\r\n        successUrl: `${frontend}/purchase`,\r\n        sourceUrl: router.asPath,\r\n      })\r\n    );\r\n\r\n    const res = await fetch(`${backend}/payment/initiate`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: formData,\r\n    });\r\n\r\n    return res;\r\n  };\r\n\r\n  const redirectToStripeCheckout = async ({ stripe, sessionId }) => {\r\n    const result = await stripe.redirectToCheckout({\r\n      sessionId,\r\n    });\r\n    if (result.error) {\r\n      // console.log(result.error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Button onClick={handleClick} variant=\"contained\" color=\"primary\">\r\n      {ENROLL_BUTTON_TEXT}\r\n    </Button>\r\n  );\r\n};\r\n\r\nStripe.propTypes = {\r\n  course: publicCourse.isRequired,\r\n  siteInfo: siteInfoProps,\r\n  auth: authProps,\r\n  address: addressProps,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  siteInfo: state.siteinfo,\r\n  auth: state.auth,\r\n  address: state.address,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Stripe);\r\n"]},"metadata":{},"sourceType":"module"}