{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport _classCallCheck from \"C:/Users/MGS/Sistemas/temp/courselit/packages/blog/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/MGS/Sistemas/temp/courselit/packages/blog/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/MGS/Sistemas/temp/courselit/packages/blog/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"C:/Users/MGS/Sistemas/temp/courselit/packages/blog/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:/Users/MGS/Sistemas/temp/courselit/packages/blog/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\n\n//import { connect } from \"react-redux\";\nvar CodeInjector = /*#__PURE__*/function (_React$Component) {\n  _inherits(CodeInjector, _React$Component);\n\n  var _super = _createSuper(CodeInjector);\n\n  function CodeInjector() {\n    _classCallCheck(this, CodeInjector);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CodeInjector, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var targetTagsForInjection = [\"head\"];\n\n      for (var _i = 0, _targetTagsForInjecti = targetTagsForInjection; _i < _targetTagsForInjecti.length; _i++) {\n        var target = _targetTagsForInjecti[_i];\n        this.injectCodeIn(target);\n      }\n    }\n  }, {\n    key: \"injectCodeIn\",\n    value: function injectCodeIn(targetHTMLTag) {\n      var tempContainer = document.createElement(\"div\"); //tempContainer.innerHTML = this.props.codeForHead;\n\n      var children = tempContainer.children;\n\n      for (var i = 0; i < children.length; i++) {\n        var elem = children[i];\n\n        if (elem.nodeName === \"SCRIPT\") {\n          var script = document.createElement(\"script\");\n          script.innerHTML = elem.innerHTML;\n          this.copyAttributes(elem, script);\n          elem = script;\n        }\n\n        document[targetHTMLTag].appendChild(elem);\n      }\n    }\n  }, {\n    key: \"copyAttributes\",\n    value: function copyAttributes(source, target) {\n      var attr;\n      var attributes = Array.prototype.slice.call(source.attributes);\n\n      while (attr = attributes.pop()) {\n        target.setAttribute(attr.nodeName, attr.nodeValue);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsx(_Fragment, {});\n    }\n  }]);\n\n  return CodeInjector;\n}(React.Component); //CodeInjector.propTypes = {\n//  codeForHead: PropTypes.string,\n//};\n//const mapStateToProps = (state) => ({  codeForHead: state.siteinfo.codeInjectionHead,});\n//export default connect(mapStateToProps)(CodeInjector);\n\n\nexport default CodeInjector;","map":null,"metadata":{},"sourceType":"module"}