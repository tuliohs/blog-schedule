{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"C:/Users/MGS/Sistemas/temp/courselit/packages/blog/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/MGS/Sistemas/temp/courselit/packages/blog/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/MGS/Sistemas/temp/courselit/packages/blog/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"C:/Users/MGS/Sistemas/temp/courselit/packages/blog/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:/Users/MGS/Sistemas/temp/courselit/packages/blog/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\"; //import { connect } from \"react-redux\";\n\nvar CodeInjector = /*#__PURE__*/function (_React$Component) {\n  _inherits(CodeInjector, _React$Component);\n\n  var _super = _createSuper(CodeInjector);\n\n  function CodeInjector() {\n    _classCallCheck(this, CodeInjector);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CodeInjector, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var targetTagsForInjection = [\"head\"];\n\n      for (var _i = 0, _targetTagsForInjecti = targetTagsForInjection; _i < _targetTagsForInjecti.length; _i++) {\n        var target = _targetTagsForInjecti[_i];\n        this.injectCodeIn(target);\n      }\n    }\n  }, {\n    key: \"injectCodeIn\",\n    value: function injectCodeIn(targetHTMLTag) {\n      var tempContainer = document.createElement(\"div\"); //tempContainer.innerHTML = this.props.codeForHead;\n\n      var children = tempContainer.children;\n\n      for (var i = 0; i < children.length; i++) {\n        var elem = children[i];\n\n        if (elem.nodeName === \"SCRIPT\") {\n          var script = document.createElement(\"script\");\n          script.innerHTML = elem.innerHTML;\n          this.copyAttributes(elem, script);\n          elem = script;\n        }\n\n        document[targetHTMLTag].appendChild(elem);\n      }\n    }\n  }, {\n    key: \"copyAttributes\",\n    value: function copyAttributes(source, target) {\n      var attr;\n      var attributes = Array.prototype.slice.call(source.attributes);\n\n      while (attr = attributes.pop()) {\n        target.setAttribute(attr.nodeName, attr.nodeValue);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n    }\n  }]);\n\n  return CodeInjector;\n}(React.Component); //CodeInjector.propTypes = {\n//  codeForHead: PropTypes.string,\n//};\n//const mapStateToProps = (state) => ({  codeForHead: state.siteinfo.codeInjectionHead,});\n//export default connect(mapStateToProps)(CodeInjector);\n\n\nexport default CodeInjector;","map":{"version":3,"sources":["C:/Users/MGS/Sistemas/temp/courselit/packages/blog/components/Public/CodeInjector.js"],"names":["React","PropTypes","CodeInjector","targetTagsForInjection","target","injectCodeIn","targetHTMLTag","tempContainer","document","createElement","children","i","length","elem","nodeName","script","innerHTML","copyAttributes","appendChild","source","attr","attributes","Array","prototype","slice","call","pop","setAttribute","nodeValue","Component"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CACA;;IACMC,Y;;;;;;;;;;;;;wCACgB;AAClB,UAAMC,sBAAsB,GAAG,CAAC,MAAD,CAA/B;;AACA,+CAAqBA,sBAArB,2CAA6C;AAAxC,YAAMC,MAAM,4BAAZ;AACH,aAAKC,YAAL,CAAkBD,MAAlB;AACD;AACF;;;iCAEYE,a,EAAe;AAC1B,UAAMC,aAAa,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAtB,CAD0B,CAE1B;;AACA,UAAMC,QAAQ,GAAGH,aAAa,CAACG,QAA/B;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAAQ,CAACE,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,YAAIE,IAAI,GAAGH,QAAQ,CAACC,CAAD,CAAnB;;AACA,YAAIE,IAAI,CAACC,QAAL,KAAkB,QAAtB,EAAgC;AAC9B,cAAMC,MAAM,GAAGP,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAM,UAAAA,MAAM,CAACC,SAAP,GAAmBH,IAAI,CAACG,SAAxB;AACA,eAAKC,cAAL,CAAoBJ,IAApB,EAA0BE,MAA1B;AACAF,UAAAA,IAAI,GAAGE,MAAP;AACD;;AACDP,QAAAA,QAAQ,CAACF,aAAD,CAAR,CAAwBY,WAAxB,CAAoCL,IAApC;AACD;AACF;;;mCAEcM,M,EAAQf,M,EAAQ;AAC7B,UAAIgB,IAAJ;AACA,UAAMC,UAAU,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BN,MAAM,CAACE,UAAlC,CAAnB;;AACA,aAAQD,IAAI,GAAGC,UAAU,CAACK,GAAX,EAAf,EAAkC;AAChCtB,QAAAA,MAAM,CAACuB,YAAP,CAAoBP,IAAI,CAACN,QAAzB,EAAmCM,IAAI,CAACQ,SAAxC;AACD;AACF;;;6BAEQ;AACP,0BAAO,qCAAP;AACD;;;;EAlCwB5B,KAAK,CAAC6B,S,GAqCjC;AACA;AACA;AAEA;AACA;;;AACA,eAAe3B,YAAf","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n//import { connect } from \"react-redux\";\r\nclass CodeInjector extends React.Component {\r\n  componentDidMount() {\r\n    const targetTagsForInjection = [\"head\"];\r\n    for (const target of targetTagsForInjection) {\r\n      this.injectCodeIn(target);\r\n    }\r\n  }\r\n\r\n  injectCodeIn(targetHTMLTag) {\r\n    const tempContainer = document.createElement(\"div\");\r\n    //tempContainer.innerHTML = this.props.codeForHead;\r\n    const children = tempContainer.children;\r\n    for (let i = 0; i < children.length; i++) {\r\n      let elem = children[i];\r\n      if (elem.nodeName === \"SCRIPT\") {\r\n        const script = document.createElement(\"script\");\r\n        script.innerHTML = elem.innerHTML;\r\n        this.copyAttributes(elem, script);\r\n        elem = script;\r\n      }\r\n      document[targetHTMLTag].appendChild(elem);\r\n    }\r\n  }\r\n\r\n  copyAttributes(source, target) {\r\n    let attr;\r\n    const attributes = Array.prototype.slice.call(source.attributes);\r\n    while ((attr = attributes.pop())) {\r\n      target.setAttribute(attr.nodeName, attr.nodeValue);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <></>;\r\n  }\r\n}\r\n\r\n//CodeInjector.propTypes = {\r\n//  codeForHead: PropTypes.string,\r\n//};\r\n\r\n//const mapStateToProps = (state) => ({  codeForHead: state.siteinfo.codeInjectionHead,});\r\n//export default connect(mapStateToProps)(CodeInjector);\r\nexport default CodeInjector\r\n"]},"metadata":{},"sourceType":"module"}