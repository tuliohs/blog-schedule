{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { addressProps, authProps, publicCourse } from \"../../types\";\nimport { ENROLL_BUTTON_TEXT } from \"../../config/strings\"; //import { connect } from \"react-redux\";\n\nimport fetch from \"isomorphic-unfetch\";\nimport { useRouter } from \"next/router\"; //import { networkAction, setAppMessage } from \"../../redux/actions\";\n//import AppMessage from \"../../models/app-message\";\n\nconst Free = ({\n  course,\n  auth,\n  dispatch,\n  address\n}) => {\n  const router = useRouter();\n  const {\n    0: disabled,\n    1: setDisabled\n  } = useState(false);\n\n  const handleClick = async () => {\n    try {\n      setDisabled(true); //dispatch(networkAction(true));\n\n      let initiatePaymentResponse = await makePaymentRequest({\n        courseId: course.id,\n        backend: address.backend,\n        token: auth.token,\n        dispatch\n      });\n\n      if (initiatePaymentResponse.status === 401) {\n        router.push(`/login?redirect=${router.asPath}`);\n        return;\n      }\n\n      initiatePaymentResponse = await initiatePaymentResponse.json();\n\n      if (initiatePaymentResponse.status === \"success\") {\n        router.reload();\n      } else if (initiatePaymentResponse.status === \"failed\") {//dispatch(setAppMessage(new AppMessage(initiatePaymentResponse.error)));\n      }\n    } catch (err) {//dispatch(setAppMessage(new AppMessage(err.message)));\n    } finally {\n      dispatch(networkAction(false));\n      setDisabled(false);\n    }\n  };\n\n  const makePaymentRequest = async ({\n    courseId,\n    backend,\n    token,\n    dispatch\n  }) => {\n    const formData = new window.FormData();\n    formData.append(\"courseid\", courseId);\n    const res = await fetch(`${backend}/payment/initiate`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      body: formData\n    });\n    return res;\n  };\n\n  return /*#__PURE__*/_jsx(Button, {\n    onClick: handleClick,\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: disabled,\n    children: ENROLL_BUTTON_TEXT\n  });\n};\n\n//const mapStateToProps = (state) => ({auth: state.auth,address: state.address,})\n//const mapDispatchToProps = (dispatch) => ({dispatch: dispatch,});\n//export default connect(mapStateToProps, mapDispatchToProps)(Free);\nexport default Free;","map":null,"metadata":{},"sourceType":"module"}